<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://thinkingco.de/index.xml/</link>
    
    
    
    <updated>Sun, 29 Mar 2015 20:44:00 &#43;0000</updated>
    
    <item>
      <title>Git stash content</title>
      <link>http://thinkingco.de/notes/git-stash-content/</link>
      <pubDate>Sun, 29 Mar 2015 20:44:00 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/notes/git-stash-content/</guid>
      <description>&lt;p&gt;&lt;strong&gt;WHAT:&lt;/strong&gt; If you need to check your git stash content&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HOW:&lt;/strong&gt; You can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash show -p stash@{0}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>No root CNAME DNS</title>
      <link>http://thinkingco.de/notes/no-root-cname-dns/</link>
      <pubDate>Sun, 29 Mar 2015 20:00:00 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/notes/no-root-cname-dns/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;CNAME in apex&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;WHAT:&lt;/strong&gt; CNAME in apex is forbidden by the RFC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHY:&lt;/strong&gt; CNAME overrides all other records. Therefore it&amp;rsquo;s impossible to construct a valid zone where the apex has a CNAME, since it would also override the SOA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MY EXPERIENCE:&lt;/strong&gt; I tried to setup github pages on my domain root &lt;code&gt;thinkingco.de&lt;/code&gt; what happened was that my &lt;code&gt;fastmail.com&lt;/code&gt; account stopped to work correctly.&lt;/p&gt;

&lt;p&gt;What I did was to switch my github pages on &lt;code&gt;www.thinkingco.de&lt;/code&gt; and then add a redirect.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Hugo site and deployment workflow</title>
      <link>http://thinkingco.de/techblog/new-hugo-site-and-deployment-workflow/</link>
      <pubDate>Fri, 27 Mar 2015 00:22:00 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/new-hugo-site-and-deployment-workflow/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve longed for long to have a statically generated website.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always found wordpress not to be inline with my vision of as thin code as possible.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; came into play. I find it particularly attractive because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;it is blazing fast (you can rebuild your site in milliseconds)&lt;/li&gt;
&lt;li&gt;it is written in &lt;a href=&#34;https://golang.org&#34;&gt;go&lt;/a&gt; language which I find extremely interesting for its simplicity&lt;/li&gt;
&lt;li&gt;it is written by &lt;a href=&#34;http://spf13.com&#34;&gt;Steve Francia&lt;/a&gt; of Docker, MongoDB, vim-spf13 and other project&amp;rsquo;s fame&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I love docker and vim and now also &lt;strong&gt;Hugo!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apart from copying the hugo website layout I also find it very pleasing to write content with it in &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and also find it very easy to deploy everything to &lt;a href=&#34;https://pages.github.com/&#34;&gt;github pages&lt;/a&gt; through a &lt;strong&gt;git subtree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To setup your Hugo website you need to have a git repository on github.&lt;/p&gt;

&lt;p&gt;Remove the public directory from the .gitignore file. Hugo projects ignore it by default.&lt;/p&gt;

&lt;p&gt;Add the public directory to your repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add public &amp;amp;&amp;amp; git commit -m &amp;quot;Initial public subtree commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deploy the subtree to a different branch. Specify a relative path to your public directory with &amp;ndash;prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git subtree push --prefix public origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Develop normally, committing your entire repository to your default (master) branch.&lt;/p&gt;

&lt;p&gt;To deploy the public directory, run the subtree push command from the root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git subtree push --prefix public origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you only need a &lt;code&gt;CNAME&lt;/code&gt; file with your domain name inside and to CNAME your DNS to your default github.io domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CNAME thinkingco.de tommasop.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Overall I&amp;rsquo;m very happy with the new asset:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no db&lt;/li&gt;
&lt;li&gt;no webserver&lt;/li&gt;
&lt;li&gt;no administrative console&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;just content&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2014 thinning list</title>
      <link>http://thinkingco.de/techblog/2014-thinning-list/</link>
      <pubDate>Sat, 04 Jan 2014 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/2014-thinning-list/</guid>
      <description>&lt;p&gt;To be faithful to my motto&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thin code is king code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#8217;m willing to slim down my development/deployment stack.&lt;/p&gt;

&lt;p&gt;This year I will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Switch from rvm to &lt;a href=&#34;https://github.com/postmodern/chruby&#34;&gt;chruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Migrate this blog from WordPress to either &lt;a href=&#34;http://www.locomotivecms.com/&#34;&gt;LocomotiveCMS&lt;/a&gt; or &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jeckyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thin down all development and deployment by using &lt;a href=&#34;http://www.docker.io/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; (this is just because to thin down code you need to use the thinnest tool available for each task)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Happy coding year.&lt;/p&gt;

&lt;p&gt;P.S. while at it I&amp;#8217;d also like to thin myself a bit &amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Polymorphic attachments for Rails 4 and ActiveAdmin</title>
      <link>http://thinkingco.de/techblog/polymorphic-attachments-for-rails-4-and-activeadmin/</link>
      <pubDate>Sat, 04 Jan 2014 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/polymorphic-attachments-for-rails-4-and-activeadmin/</guid>
      <description>&lt;p&gt;Following my &lt;a href=&#34;http://thinkingco.de/techblog/rails-3-is_documentable-with-activeadmin/&#34;&gt;2012 post!!!&lt;/a&gt; I finally managed to write down a small Rails 4 engine that allows anyone to add multiple files to any model in his rails app.&lt;/p&gt;

&lt;p&gt;The gem has the highly innovative name of: &lt;strong&gt;AttachIt&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As the original post also took into account ActiveAdmin I managed to add the same functionalities to ActiveAdmin also.&lt;/p&gt;

&lt;p&gt;The gem is thought for use in the show action for your model.&lt;/p&gt;

&lt;p&gt;I have a lot of websites with this requirement of handling multiple files for multiple models so I think this must be a fairly common pattern.&lt;/p&gt;

&lt;p&gt;I also use &lt;a href=&#34;https://github.com/activeadmin/activeadmin&#34;&gt;activeadmin&lt;/a&gt; quite broadly and find it highly flexible. And it is indeed! Here I use &lt;a href=&#34;http://www.dropzonejs.com&#34;&gt;dropzonejs.com&lt;/a&gt; inside activeadmin and also import bootstrap modal and grid to handle the responsive image gallery.&lt;/p&gt;

&lt;p&gt;Enjoy: &lt;a href=&#34;https://github.com/tommasop/attach_it&#34;&gt;https://github.com/tommasop/attach_it&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate Joomla from Windows 2003 to Docker</title>
      <link>http://thinkingco.de/techblog/migrate-joomla-windows-2003-docker/</link>
      <pubDate>Sat, 04 Jan 2014 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/migrate-joomla-windows-2003-docker/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Migrate Apache2/PHP website to docker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before continuing my series on rails deployment with docker in a PAASY environment I needed to migrate and existing Joomla 1.5 from a Windows 2003 machine to an Azure Ubuntu Linux 12.04.&lt;/p&gt;

&lt;p&gt;Nothing fancy but there is also a Rails application pointing to the same MySql db which also needs to run on the same Linux VM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As the Joomla app is the main company website I don’t want any problem in the Rails app to affect the main website.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With one machine available I decided to follow the &lt;strong&gt;docker&lt;/strong&gt; path.&lt;/p&gt;

&lt;p&gt;Envisioned system is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data only container&lt;/li&gt;
&lt;li&gt;MySql container&lt;/li&gt;
&lt;li&gt;Apache2 &amp;#8211; php container&lt;/li&gt;
&lt;li&gt;Rails container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Data only container&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started with a base data-only container following the so called &lt;strong&gt;container as volume pattern&lt;/strong&gt;. It is a bare container not even running but existing only to expose common directories to all the other containers. Its data structure is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data

&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;www&lt;/li&gt;
&lt;li&gt;rails&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is its Dockerfile:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;FROM ubuntu:precise
MAINTAINER Thinking Code &amp;lt;a href=&#34;mailto:tommaso@thinkingco.de&#34;&amp;gt;tommaso@thinkingco.de&amp;lt;/a&amp;gt;

# Create data directories

RUN mkdir -p /data/mysql /data/www /data/rails

# Create /data volume

VOLUME [“/data”]

CMD /bin/sh &lt;/pre&gt;

&lt;p&gt;The container can be built and started with the following commands:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker build -t data-store .
docker run -name my-data-store data-store true &lt;/pre&gt;

&lt;p&gt;If you check the container status you will find it’s exited with code 0 still it can be happily used for data storage. This strange container is the holy grail of data persistence and data migration through containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySql (MariaDB) container&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As MariaDB is an easy drop in replacement for MySql and is completely open source and i tested with Joomla I opted for this solution. The container will have a single service running exposed on port 3306. Here is the Dockerfile:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;# MariaDB (https://mariadb.org/)

FROM ubuntu:precise MAINTAINER Thinking Code &amp;lt;a href=&#34;http://thinkingco.de/&#34;&amp;gt;&amp;lt;&amp;lt;/a&amp;gt;tommaso@thinkingco.de&amp;gt;

# Hack for initctl not being available in Ubuntu

RUN dpkg-divert –local –rename –add /sbin/initctl RUN ln -s /bin/true /sbin/initctl

RUN echo “deb http://archive.ubuntu.com/ubuntu precise main universe” &amp;gt; /etc/apt/sources.list &amp;&amp; \
          apt-get update &amp;&amp; \
          apt-get upgrade -y &amp;&amp; \
          apt-get -y -q install wget logrotate

# Ensure UTF–8

RUN apt-get update
RUN locale-gen en_US.UTF–8
ENV LANG en_US.UTF–8 ENV LC_ALL en_US.UTF–8

# Set noninteractive mode for apt-get

ENV DEBIAN_FRONTEND noninteractive

# Install MariaDB from repository.

RUN apt-get -y install python-software-properties &amp;&amp; \
    apt-key adv –recv-keys –keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db &amp;&amp; \
    add-apt-repository &#39;deb http://mirror.jmu.edu/pub/mariadb/repo/5.5/ubuntu precise main&#39; &amp;&amp; \
    apt-get update &amp;&amp; \
    apt-get install -y mariadb-server

# Decouple our data from our container.

VOLUME [“/data”]

# Configure the database to use our data dir.

RUN sed -i -e &#39;s/^datadir\s&amp;lt;i&amp;gt;=.&amp;lt;/i&amp;gt;/datadir = \/data\/mysql/&#39; /etc/mysql/my.cnf

# Configure MariaDB to listen on any address.

RUN sed -i -e &#39;s/^bind-address/#bind-address/&#39; /etc/mysql/my.cnf

EXPOSE 3306

ADD start.sh /start.sh
RUN chmod +x /start.sh
ENTRYPOINT [“/start.sh”]&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;start.sh&lt;/strong&gt; script is the ENTRYPOINT for each container run from the previous Dockerfile image and is responsible for actually starting MariaDB after a setup which includes the setting of a custom datadir, the migration of the existing data in the new directory and the setup of some users and passwords.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;b&amp;gt;!/bin/bash&amp;lt;/b&amp;gt;

# Starts up MariaDB within the container.

# Stop on error

set -e

DATADIR=“/data/mysql”

/etc/init.d/mysql stop

# test if DATADIR has content

if [ ! “$(ls -A $DATADIR)” ]; then
  echo “Initializing MariaDB at $DATADIR” # Copy the data that we generated within the container to the empty DATADIR.
  cp -R /var/lib/mysql/* $DATADIR
fi

# Ensure mysql owns the DATADIR
chown -R mysql $DATADIR chown root $DATADIR/debian*.flag

# The password for ‘debian-sys-maint’@’localhost’ is auto generated.
# The database inside of DATADIR may not have been generated with this password.
# So, we need to set this for our database to be portable.

echo &#34;Setting password for the &#39;debian-sys-maint&#39;@&#39;localhost&#39; user&#34; /etc/init.d/mysql start sleep 1 DB_MAINT_PASS=$(cat /etc/mysql/debian.cnf |grep -m 1 &#34;password\s&amp;lt;i&amp;gt;=\s&#34;&amp;lt;/i&amp;gt;| sed &#39;s/^password\s&amp;lt;i&amp;gt;=\s&amp;lt;/i&amp;gt;//&#39;) mysql -u root -e \ &#34;GRANT ALL PRIVILEGES ON &amp;lt;i&amp;gt;.&amp;lt;/i&amp;gt; TO &#39;debian-sys-maint&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;$DB_MAINT_PASS&#39;;&#34;

# Create the superuser named ‘docker’.

mysql -u root -e \ “DELETE FROM mysql.user WHERE user = ‘docker’; CREATE USER ‘docker’@’localhost’ IDENTIFIED BY ‘docker’; GRANT ALL PRIVILEGES ON &amp;lt;i&amp;gt;.&amp;lt;/i&amp;gt; TO ‘docker’@’localhost’ WITH GRANT OPTION; CREATE USER ‘docker’@‘%’ IDENTIFIED BY ‘docker’; GRANT ALL PRIVILEGES ON &amp;lt;i&amp;gt;.&amp;lt;/i&amp;gt; TO ‘docker’@‘%’ WITH GRANT OPTION;” &amp;&amp; \
 /etc/init.d/mysql stop

# Start MariaDB

echo &#34;Starting MariaDB…&#34; /usr/bin/mysqld_safe &lt;/pre&gt;

&lt;p&gt;Build it and run it with volumes from the &lt;strong&gt;my-data-container&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker build -t site-db .
docker run -d -p 3306:3306 -volumes-from my-data-store -name my-site-db site-db &lt;/pre&gt;

&lt;p&gt;So up to now we have a MariaDB saving data on a /data/mysql folder shared from another container.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache2 &amp;#8211; php container&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the main container which will actually serve the Jommla website. This container will have two services running: &lt;strong&gt;httpd and sshd&lt;/strong&gt;. &lt;a href=&#34;http://supervisord.org/&#34;&gt;Supervisord&lt;/a&gt; will be in charge of starting both services and keep them running. Dockerfile:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;FROM ubuntu:precise

MAINTAINER Thinking Code &amp;lt;a href=&#34;http://thinkingco.de/&#34;&amp;gt;&amp;lt;&amp;lt;/a&amp;gt;tommaso@thinkingco.de&amp;gt;

# Hack for initctl not being available in Ubuntu
RUN dpkg-divert –local –rename –add /sbin/initctl
RUN ln -s /bin/true /sbin/initctl

# Install all that’s needed
RUN echo “deb http://archive.ubuntu.com/ubuntu precise main universe” &amp;gt; /etc/apt/sources.list &amp;&amp; \
    apt-get update &amp;&amp; apt-get -y upgrade &amp;&amp; \
    DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-client apache2 libapache2-mod-php5 pwgen python-setuptools vim-tiny php5-mysql openssh-server sudo php5-ldap unzip &amp;&amp; \
    apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*

RUN easy_install supervisor

# Add all config and start files
ADD ./start.sh /start.sh
ADD ./foreground.sh /etc/apache2/foreground.sh
ADD ./supervisord.conf /etc/supervisord.conf
RUN mkdir -p /var/log/supervisor /var/run/sshd
RUN chmod 755 /start.sh &amp;&amp; chmod 755 /etc/apache2/foreground.sh

# Set Apache user and log
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2

VOLUME [“/data”]

# Add site to apache

ADD ./pcsnetweb /etc/apache2/sites-available/
RUN a2ensite pcsnetweb

# Set root password to access through ssh
RUN echo &#34;root:myroootpwd” |chpasswd

# Expose web and ssh
EXPOSE 80
EXPOSE 22

CMD [“/bin/bash”, “/start.sh”]&lt;/pre&gt;

&lt;p&gt;In addition to the Dockerfile there are several files needed to set everything up: an apache virtual host file, a file to start apache in foreground and a configuration file for supervisor. Then a start file to sum everything up and all the website files. Being a Joomla migration I only have a kickstarter.php and the jpa archive to restore everything from an akeebabackup.&lt;/p&gt;

&lt;p&gt;So here we have the relevant part of the &lt;strong&gt;supervisord.conf&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;[program:httpd]
command=/etc/apache2/foreground.sh
stopsignal=6
;sshd
[program:sshd]
command=/usr/sbin/sshd -D
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.log
autorestart=true &lt;/pre&gt;

&lt;p&gt;The foreground.sh:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;b&amp;gt;!/bin/bash&amp;lt;/b&amp;gt;

read pid cmd state ppid pgrp session tty_nr tpgid rest &amp;lt; /proc/self/stat trap “kill -TERM -$pgrp; exit” EXIT TERM KILL SIGKILL SIGTERM SIGQUIT

source /etc/apache2/envvars
apache2 -D FOREGROUND &lt;/pre&gt;

&lt;p&gt;The start.sh:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;b&amp;gt;!/bin/bash&amp;lt;/b&amp;gt;

if [ -d /data/www ]; then
  cp ./site-mysite.jpa /data/www/
  cp ./kickstart-core–3.8.0.zip /data/www/
fi
if [ -f /data/www/kickstart-core–3.8.0.zip ]; then
  cd /data/www &amp;&amp; unzip kickstart-core–3.8.0.zip
  rm kickstart-core–3.8.0.zip
  cp kickstart-core–3.8.0/* .
  rm -rf kickstart-core–3.8.0
fi
chown www-data:www-data /data/www
supervisord -n &lt;/pre&gt;

&lt;p&gt;Now build and run it:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker build -t web-machine .
docker run -d -name my-web-machine -p 80:80 -p 9000:22 -link my-site-db:mysql -volumes-from my-data-store web-machine &lt;/pre&gt;

&lt;p&gt;I then needed to copy the temporary beckup files into the /data/www directory which can be done finding the actual dir with the&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker inspect my-data-store | grep data&lt;/pre&gt;

&lt;p&gt;command which will give use the actual /data/www path on the host machine.&lt;/p&gt;

&lt;p&gt;I then moved there the two needed file for restoring Joomla from an Akeeba backup: 1. a site-mysite–20131230–162721.jpa file containing all db data and files 2. kickstart-core–3.8.0.zip containing the kickstarter.php page to restore the backup&lt;/p&gt;

&lt;p&gt;I’m doing this manually and not through a Dockerfile because it will be needed only the first time and not on every container start up.&lt;/p&gt;

&lt;p&gt;So now we have all the db data in the my-data-store /data/mysql dir, all the website data in the my-data-store /data/www dir thus having a full backup can be achieved also with rsync on the /data dir.&lt;/p&gt;

&lt;p&gt;We can also access the Apache2 PHP container through ssh using the host ip address on port 9000 and from inside the Apache container connect to the MariaDB through mysql client.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy Rails with Docker, Part 2</title>
      <link>http://thinkingco.de/techblog/deploy-rails-with-docker-part-2/</link>
      <pubDate>Sat, 04 Jan 2014 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/deploy-rails-with-docker-part-2/</guid>
      <description>

&lt;p&gt;Series takeaways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure a Rails app to be deployed on a cloud architecture (Part 1)&lt;/li&gt;
&lt;li&gt;Create a vagrant test machine with docker installed (Part 1)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interactive image building vs. Dockerfiles (Part 2)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Persistence (Part 2)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good Practices (Part 2)&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create 7 docker containers that will host the reconfigured rails app (Part 3):&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Container 1: Redis Server (for session storing)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Container 2: Fluentd (log collection)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Container 3: ElasticSearch (log storage)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Container 4: Kibana (log analysis)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Container 5: PostgreSQL + PostGIS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Container 6: Chruby Ruby Rails Puma&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Container 7: Nginx&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Link the 7 containers through &lt;a href=&#34;http://blog.docker.io/tag/links/&#34;&gt;Docker Links&lt;/a&gt; (Part 3) ‚Äî&amp;gt; intra host communication&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Real Docker Playground with two hosts (Part 4)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy PostgreSQL on this second host (Part 4)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make the app work with the second host postgres container (Part 4) ‚Äî&amp;gt; inter host communication&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SCALE (Part 5)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatic Service Discovery with &lt;a href=&#34;https://github.com/skynetservices/skydns&#34;&gt;Skydns&lt;/a&gt; and &lt;a href=&#34;https://github.com/crosbymichael/skydock&#34;&gt;Skydock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;*   Session data and Logs HA&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Database HA&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Interactive image building vs Dockerfiles&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is possible to create docker images either interactively or through a Dockerfile.&lt;/p&gt;

&lt;p&gt;To clarify this I‚Äôll show how to create a Redis Server in both ways.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Container 1: Redis Server&lt;/h3&gt;

&lt;p&gt;We need to login into the vagrant machine to begin working with our containers
  `&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;vagrant ssh&lt;/pre&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Manual build process&lt;/h4&gt;

&lt;p&gt;Using the vagrant docker image docker will already be running in daemon mode.&lt;/p&gt;

&lt;p&gt;To run a container from the base ubuntu image:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo docker run -i -t ubuntu /bin/bash&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;This will run a container in interactive (-i) mode with a pseudo tty (-t) and give us a /bin/bash terminal to use inside the container.
  The container will be spawned from an image, the base ubuntu image which will be automatically downloaded if not found locally.&lt;/p&gt;

&lt;p&gt;The command will give us access to the newly spawned container as root.&lt;/p&gt;

&lt;p&gt;We will then be able to issue all the needed commands to setup the desired service in the following example the redis server:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;br /&amp;gt;&amp;lt;%%KEEPWHITESPACE%%&amp;gt; echo &amp;quot;deb &lt;a href=&#34;http://archive.ubuntu.com/ubuntu&#34;&gt;http://archive.ubuntu.com/ubuntu&lt;/a&gt; precise main universe&amp;quot; &amp;amp;gt; /etc/apt/sources.list&amp;lt;br /&amp;gt;&amp;lt;%%KEEPWHITESPACE%%&amp;gt; apt-get update&amp;lt;br /&amp;gt;&amp;lt;%%KEEPWHITESPACE%%&amp;gt; apt-get install -y redis-server&amp;lt;br /&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The base redis machine is ready let‚Äôs commit it and save it as an image to be able to spawn it multiple times as needed.&lt;/p&gt;

&lt;p&gt;Send ctrl-p + ctrl-q to exit the container shell (if you forgot something just &lt;code&gt;sudo docker attach &amp;lt;container_id&amp;gt;&lt;/code&gt;) and then run:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo docker commit &amp;amp;lt;container_id&amp;amp;gt; &amp;amp;lt;some_name&amp;amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;If you simply &lt;code&gt;exit&lt;/code&gt; the container shell the container will shut down.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;The docker build process of a Dockerfile has the following logical steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;spawn a container from an image (because images are immutable)

&lt;ol&gt;
&lt;li&gt;run shell scripts inside the container&lt;/li&gt;
&lt;li&gt;save the result: commit the container as an intermediate image&lt;/li&gt;
&lt;li&gt;proceed to next build step&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; is a shell inspired script supporting &lt;a href=&#34;http://docs.docker.io/en/latest/use/builder/&#34;&gt;few instructions&lt;/a&gt; that describes the &lt;code&gt;docker build&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;Here is the same redis server machine expressed with a Dockerfile:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;br /&amp;gt;FROM ubuntu:precise&amp;lt;br /&amp;gt;RUN apt-get update&amp;lt;br /&amp;gt;RUN apt-get -y install redis-server&amp;lt;br /&amp;gt;EXPOSE 6379&amp;lt;br /&amp;gt;ENTRYPOINT [&amp;quot;/usr/bin/redis-server&amp;quot;]&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;You can also leverage the wonderful docker community and pull a ready-to-go image from the Docker index:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker pull dockerfile/redis&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Data Persistence&lt;/h2&gt;

&lt;p&gt;As &lt;strong&gt;containers are ephemeral&lt;/strong&gt; two problems arises:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Data Persistence&lt;/strong&gt; across containers restart&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network configuration persistence or predictability&lt;/strong&gt; across containers restart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I‚Äôll deal here about the first issue and in &lt;em&gt;Part 4&lt;/em&gt; about the latter.&lt;/p&gt;

&lt;p&gt;Data persistence can be implemented in Docker essentially in three ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sharing a volume between a container and the host&lt;/li&gt;
&lt;li&gt;Decoupling data within each container creating a volume&lt;/li&gt;
&lt;li&gt;Sharing one or more containers as the data volume hoders between one or more containers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first and second implementations are as easy as:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo docker run -v /var/logs:/var/host_logs:ro ubuntu bash&lt;/pre&gt;
  &lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo docker run -v /var/new_volume ubuntu bash&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;with the &lt;code&gt;-v&lt;/code&gt; option taking the following parameters:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;-v=[]: Create a bind mount with: [host-dir]:[container-dir]:[rw|ro].&amp;lt;br /&amp;gt;If &amp;quot;host-dir&amp;quot; is missing, then docker creates a new volume.&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The Docker documentation explains very well why sharing volumes with the host is not good:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is not available from a Dockerfile as it makes the built image less portable or shareable. [host-dir] volumes are 100% host dependent and will break on any other machine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To obtain &lt;strong&gt;data decouplication&lt;/strong&gt; you can also add a &lt;code&gt;VOLUME&lt;/code&gt;directive to an image Dockerfile and this will automatically create a new volume.
  Data in the volume is not destroyed with the container but will persist in a &lt;code&gt;/var/lib/docker/dir/vfs/container_id&lt;/code&gt; folder that you can grabo with a &lt;code&gt;docker inspect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The third implementation is almost easy as the first two but has the portability/shareability advantage we need. It is a &lt;strong&gt;data decouplication&lt;/strong&gt; run through an intermediate container. A sort of &lt;em&gt;container-in-the-middle&lt;/em&gt; that while persisting data can also be easily ported to another host.&lt;/p&gt;

&lt;p&gt;You can create a data container like this:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker run -v /data/www -v /data/db busybox true&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;/pre&amp;gt;&amp;lt;h1&amp;gt;BUILD-USING: docker build -t data .&amp;lt;/h1&amp;gt;&amp;lt;h1&amp;gt;RUN-USING: docker run -name DATA data&amp;lt;/h1&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;br /&amp;gt;FROM busybox&amp;lt;br /&amp;gt;VOLUME [‚Äú/data/www‚Äù, ‚Äú/data/db‚Äù]&amp;lt;br /&amp;gt;CMD [&amp;quot;true&amp;quot;]&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;As any container needs a command to run, &lt;code&gt;true&lt;/code&gt; is the smallest, simplest program that you can run. Running the true command will immediately exit the container but &lt;strong&gt;once created you can mount its volumes in any other container using the &lt;code&gt;-volumes-from&lt;/code&gt; option; irrespecive of whether the container is running or not.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;busybox&lt;/strong&gt; is a wonderful linux image ASACB (as small as can be) ~ 2.5 MB!!!&lt;/p&gt;

&lt;p&gt;What can you do with this &lt;strong&gt;DATA CONTAINER&lt;/strong&gt; pattern?&lt;/p&gt;

&lt;p&gt;You can create exactly what the name implies: data containers.&lt;/p&gt;

&lt;p&gt;You can create as much containers as you like, one data container for each process or one for the process and one for ist logs or one for all processes data and one for all processes logs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This creates a data container with &lt;code&gt;/data&lt;/code&gt; volume exposed&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;docker run -v /data &amp;ndash;name PGDATA tcode/datastore&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;This binds the actual process (PostgreSQL) to the data container (you need to configure the postgresql.conf accordingly):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;docker run -d --volumes-from PGDATA --name pg93 tcode/pg93&amp;lt;/pre&amp;gt;

Now whatever happens to your pg93 container your data will be safe in your PGDATA container.
If you restart your server when the pg93 container will restart it will find all its data into PGDATA again.

More interestingly if you need to migrate your data to a new host you can do:

&amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;docker run -rm --volumes-from PGDATA -v $(pwd):/backup busybox tar cvf /backup/backup.tar /data&amp;lt;/pre&amp;gt;

                                                                                                             This will start a container which will mount the current dir in /backup and load volumes from PGDATA, then it will tar all the data in /data in a comfortable backup.tar file you will find on your current path at container exit!

                                                                                                             Now you can go to another host and recreate your PGDATA data container in the new host:

                                                                                                             &amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;docker run -v /data --name PGDATA tcode/datastore&amp;lt;/pre&amp;gt;

                                                                                                             inject the data back in the data container:

                                                                                                             &amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;docker run -rm --volumes-from PGDATA -v $(pwd):/backup busybox tar xvf /backup/backup.tar / &amp;lt;/pre&amp;gt;

                                                                                                                                                                                                                          Start your shiny new postgresql server with all your data:

                                                                                                                                                                                                                          &amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;docker run -d --volumes-from PGDATA --name pg93 tcode/pg93&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Good Practices&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                                                                                                                                                                                                                          The different kind of data persistence are interesting because they offer hints on how to do things properly in docker.
                                                                                                                                                                                                                          In this respect docker is not only a commodity over lxcs but is actually shaping up a new way of developing and deploying applications.
                                                                                                                                                                                                                          Using this wonderful piece of software bring about the need of some new practices.
                                                                                                                                                                                                                          For example:
                                                                                                                                                                                                                          &amp;amp;#8211; How can I keep my git development process and merge it with docker?
                                                                                                                                                                                                                          &amp;amp;#8211; How can I migrate an existing development/deployment situation to docker?

                                                                                                                                                                                                                          Answers will widely vary depending on which technologies you are using.

                                                                                                                                                                                                                          My actual development environment is osx/zsh/git/vim.
                                                                                                                                                                                                                          I‚Äôm developing with Rails.
                                                                                                                                                                                                                          So my actual development involves process is to change files commit them and then deploy them in production through Capistrano.

                                                                                                                                                                                                                          How can this change with docker?

                                                                                                                                                                                                                          Actually I have VirtualBox installed with Vagrant and my development workflow is the following:
                                                                                                                                                                                                                          1. In Vagrant:
                                                                                                                                                                                                                          &amp;amp;#8211; Start a database container
                                                                                                                                                                                                                          &amp;amp;#8211; Start an interactive rails container like this: `docker run -i -t -v /vagrant/rails_app:/data --link databasecontainer:db -p 80:3000 my_rails_image /bin/bash`
                                                                                                                                                                                                                          &amp;amp;#8211; Run the rails server after proper initialization: `cd /data &amp;amp;&amp;amp; bundle install &amp;amp;&amp;amp; rails s Puma`
                                                                                                                                                                                                                          2. In my OSX:
                                                                                                                                                                                                                          &amp;amp;#8211; `vim /rails_app`
                                                                                                                                                                                                                          &amp;amp;#8211; hack hack hack
                                                                                                                                                                                                                          3. In Vagrant container: CTRL+C rails s Puma
                                                                                                                                                                                                                          4. In my OSX `git push`

                                                                                                                                                                                                                          And what about deployment?

                                                                                                                                                                                                                          Deplyoment for a 12 factor app which is already configured to have minimal difference between development and production environments is quite straightforward, the only thing to take care of is getting your code from your git of choice repository:

                                                                                                                                                                                                                          GitHub

                                                                                                                                                                                                                          &amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;curl -sLk -u $REPO_TOKEN:x-oauth-basic https://github.com/$REPO_USER/$REPO_NAME/archive/master.tar.gz -o master.tar.gz&amp;lt;/pre&amp;gt;

                                                                                                                                                                                                                          Bitbucket

                                                                                                                                                                                                                          &amp;lt;pre&amp;gt;&amp;lt;pre class=&amp;quot;brush: bash; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;curl --digest --user $REPO_USER:$REPO_PASSWORD https://bitbucket.org/$REPO_USER/$REPO_NAME/get/master.tar.gz -o master.tar.gz&amp;lt;/pre&amp;gt;

                                                                                                                                                                                                                          More on this in Part 3 which will show the different Dockerfiles.

                                                                                                                                                                                                                          DATA PERSISTENCE AND DECOUPLICATION:
                                                                                                                                                                                                                          [http://docs.docker.io/use/working_with_volumes/](http://docs.docker.io/use/working_with_volumes/)
                                                                                                                                                                                                                          [http://www.offermann.us/2013/12/tiny-docker-pieces-loosely-joined.html](http://www.offermann.us/2013/12/tiny-docker-pieces-loosely-joined.html)
                                                                                                                                                                                                                          [http://www.tech-d.net/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/](http://www.tech-d.net/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/)
                                                                                                                                                                                                                          [http://stinemat.es/dockerizing-ghost-part‚Äì2-data-migration/](http://stinemat.es/dockerizing-ghost-part‚Äì2-data-migration/)
                                                                                                                                                                                                                          [http://www.techbar.me/wordpress-docker/](http://www.techbar.me/wordpress-docker/)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Deployment Rails with Docker Part 1</title>
      <link>http://thinkingco.de/techblog/deploy-rails-with-docker-part-1/</link>
      <pubDate>Wed, 11 Dec 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/deploy-rails-with-docker-part-1/</guid>
      <description>

&lt;p&gt;After my &lt;a href=&#34;http://thinkingco.de/easy-peasy-deploy&#34;&gt;first approach&lt;/a&gt; to easying up the many pains of Rails deployment I happened to bump into &lt;a href=&#34;http://www.docker.io&#34;&gt;Docker&lt;/a&gt; for a broader PAAS project.&lt;/p&gt;

&lt;p&gt;So my thought was: why automate only code deployment if I can automate the whole machine deployment especially with a tool like Docker that makes this task trivial and quick.&lt;/p&gt;

&lt;p&gt;In this way it will be extremely easy to replicate a development/production environment and instead of updating code I could simply redeploy a machine.&lt;br /&gt;
Not only this but it will be easier to experiment with a broader PAAS deployment.&lt;/p&gt;

&lt;p&gt;So these will be the takeaways from this series of posts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Configure a Rails app to be deployed on a cloud architecture (Part 1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a vagrant test machine with docker installed (Part 1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Interactive image building vs. Dockerfiles (Part 2)&lt;/li&gt;
&lt;li&gt;Data Persistence (Part 2)&lt;/li&gt;
&lt;li&gt;Development vs. Production (Part 2)&lt;/li&gt;
&lt;li&gt;Create 7 docker containers that will host the reconfigured rails app (Part 3):

&lt;ul&gt;
&lt;li&gt;Container 1: Redis Server (for session storing)&lt;/li&gt;
&lt;li&gt;Container 2: Fluentd (log collection)&lt;/li&gt;
&lt;li&gt;Container 3: ElasticSearch (log storage)&lt;/li&gt;
&lt;li&gt;Container 4: Kibana (log analysis)&lt;/li&gt;
&lt;li&gt;Container 5: PostgreSQL + PostGIS&lt;/li&gt;
&lt;li&gt;Container 6: Ruby 2.1.1 Rails Puma&lt;/li&gt;
&lt;li&gt;Container 7: Nginx&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Link the 7 containers through &lt;a href=&#34;http://blog.docker.io/tag/links/&#34;&gt;Docker Links&lt;/a&gt; (Part 3) —&amp;gt; intra host communication&lt;/li&gt;
&lt;li&gt;Create another vagrant test machine with docker (Part 4)&lt;/li&gt;
&lt;li&gt;Deploy PostgreSQL on this second host (Part 4)&lt;/li&gt;
&lt;li&gt;Make the app work with the second host postgres container (Part 4) —&amp;gt; inter host communication&lt;/li&gt;
&lt;li&gt;SCALE (Part 5)

&lt;ul&gt;
&lt;li&gt;Automatic Service Discovery with &lt;a href=&#34;https://github.com/skynetservices/skydns&#34;&gt;Skydns&lt;/a&gt; and &lt;a href=&#34;https://github.com/crosbymichael/skydock&#34;&gt;Skydock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Session data and Logs HA&lt;/li&gt;
&lt;li&gt;Database HA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The overview seems quite interesting so let’s start.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Configure a Rails app to be deployed on a cloud architecture&lt;/h2&gt;

&lt;p&gt;To configure the Rails app (or every other app) to be cloud deployable you need to follow the &lt;a href=&#34;12factor.net&#34;&gt;The twelve-factor app methodology&lt;/a&gt;.&lt;br /&gt;
You can use this methodology to build software-as-a-service apps that:&lt;br /&gt;
&amp;#8211; Use declarative formats for setup automation, to minimize time and cost for new developers joining the project;&lt;br /&gt;
&amp;#8211; Have a clean contract with the underlying operating system, offering maximum portability between execution environments;&lt;br /&gt;
&amp;#8211; Are suitable for deployment on modern cloud platforms, obviating the need for servers and systems administration;&lt;br /&gt;
&amp;#8211; Minimize divergence between development and production, enabling continuous deployment for maximum agility;&lt;br /&gt;
&amp;#8211; And can scale up without significant changes to tooling, architecture, or development practices.&lt;/p&gt;

&lt;p&gt;Going through the twelve factors I found that most of the steps are already achieved through git versioning + rails YAY!!!&lt;/p&gt;

&lt;p&gt;Nonetheless there are some points to tackle.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Config&lt;/h3&gt;

&lt;p&gt;Rails stores configuration in config files which are not checked into revision control. This violates the principle of &lt;strong&gt;strict separation of config from code&lt;/strong&gt;.&lt;br /&gt;
Configuration must not be grouped (development, test, production) and must be independently managed for each deploy.&lt;br /&gt;
It must be stored in &lt;strong&gt;&lt;em&gt;environment variables&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So what we need is a place to store env variables which won’t be committed into our git repository and a way to load it into Rails.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv gem&lt;/a&gt; is a wellcomed help in this task expecially in its master branch which now initializes before database (&lt;a href=&#34;https://github.com/laserlemon/figaro/issues/70&#34;&gt;see here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The dotenv gem let you use a &lt;code&gt;.env&lt;/code&gt;file to store ENV variables (you can also use a different &lt;code&gt;.env.environment&lt;/code&gt; file for each environment though this will break the twelve factor app principles)&lt;/p&gt;

&lt;p&gt;Something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;S3_BUCKET=YOURS3BUCKET
SECRET_KEY=YOURSECRETKEYGOESHERE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That you can use in your code this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.fog_directory  = ENV[&#39;S3_BUCKET&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time the rails app loads it will have all the variables declared in &lt;code&gt;.env&lt;/code&gt; available in &lt;code&gt;ENV&lt;/code&gt;!&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Processes&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Twelve-factor processes are stateless and share-nothing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amongst other things this means we need to store our session data either in the DB or in another kind of datastore.&lt;br /&gt;
Using the db will introduce significant lag in page rendering so I want to use a faster key/value datastore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://memcached.org/&#34;&gt;Memcached&lt;/a&gt; is a very interesting and clusterable datastore but I will use &lt;strong&gt;&lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;&lt;/strong&gt; for two fundamental reasons:&lt;br /&gt;
1. first and foremost because its creator is italian!&lt;br /&gt;
2. faster than memcached&lt;br /&gt;
3. more powerful commands&lt;br /&gt;
4. no cache warmup needed&lt;br /&gt;
5. useful for solving other problems (eg. queues with Resque)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/roidrage/redis-session-store&#34;&gt;redis-session-store&lt;/a&gt; to the rescue!&lt;/p&gt;

&lt;p&gt;Once installed and run a Redis server switching Rails session management to Redis is as simple as&lt;br /&gt;
adding a dependency on the redis-session-store gem to your Gemfile then run bundle.&lt;/p&gt;

&lt;p&gt;Open the session initializer &lt;code&gt;config/initializers/session_store.rb&lt;/code&gt; and add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AppName::Application.config.session_store :redis_session_store, {
  key: &#39;redis_session&#39;,
  redis: {
    db: 2,
    expire_after: 120.minutes,
    key_prefix: &#39;appname:session:&#39;,
    host: ENV[&amp;quot;REDIS_PORT_6379_TCP_ADDR&amp;quot;], # Redis host name, default is localhost
    port: ENV[&amp;quot;REDIS_PORT_6379_TCP_PORT&amp;quot;]   # Redis port, default is 6379
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart the server and you&amp;#8217;re ready to go!&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Keep development, staging, and production as similar as possible&lt;/h3&gt;

&lt;p&gt;Using Docker on Vagrant on my development machine means that my development and production environments will be identical!&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Treat logs as event streams&lt;/h3&gt;

&lt;p&gt;While rails is already configured to log &lt;code&gt;stdout&lt;/code&gt; to terminal when in development mode it is not thought to route events to a standard destination for long term archiving.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://fluentd.org/&#34;&gt;Fluentd&lt;/a&gt; is an open source log router (written in ruby) which can used to route log streams to a permanent storing location (MongoDB or a PostgreSQL hstore to avoid inserting another piece of software in the overall architecture, or ElasticSearch to analyze log data) and which includes a robust buffering solution.&lt;/p&gt;

&lt;p&gt;Using fluentd in a Rails 4 can be achieved through the following steps:&lt;br /&gt;
1. &lt;a href=&#34;http://docs.fluentd.org/articles/before-install&#34;&gt;Prepare the OS&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&#34;http://docs.fluentd.org/articles/install-by-deb&#34;&gt;Install fluentd (Debian flavor)&lt;/a&gt;&lt;br /&gt;
3. Add fluent logger gem to rails app&lt;br /&gt;
gem &amp;#8216;act-fluent-logger-rails&amp;#8217;&lt;br /&gt;
bundle&lt;br /&gt;
4. Configure rails to log through fluentd&lt;br /&gt;
&amp;#8211; in config/environments/production.rb&lt;br /&gt;
config.log_level = :info&lt;br /&gt;
config.logger = ActFluentLoggerRails::Logger.&lt;br /&gt;
new()&lt;br /&gt;
&amp;#8211; create a config/fluent-logger.yml file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;production:
  fluent_host:   ‘192.168.x.x’
  fluent_port:   24224
  tag:           &#39;foo&#39;
  messages_type: &#39;string&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Create a vagrant test machine with docker installed&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.docker.io/en/latest/installation/vagrant/&#34;&gt;Docker guide&lt;/a&gt; works flawlessy and deploys a vagrant image through a Dockerfile deploying docker through docker &amp;#8230; awesome!&lt;/p&gt;

&lt;p&gt;The Docker version actually deployed is 0.6.1 I need to upgrade to use the &lt;strong&gt;links&lt;/strong&gt; functionality available from 0.6.5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install curl
# Add the Docker repository key to your local keychain
sudo sh -c &amp;quot;curl https://get.docker.io/gpg | apt-key add -&amp;quot;
# Add the Docker repository to your apt sources list.
sudo sh -c &amp;quot;echo deb https://get.docker.io/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
# update your sources list
sudo apt-get update
# install the latest
sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DONE!&lt;/p&gt;

&lt;p&gt;That was easy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This ends Part 1.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy Peasy Deploy</title>
      <link>http://thinkingco.de/techblog/easy-peasy-deploy/</link>
      <pubDate>Thu, 14 Nov 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/easy-peasy-deploy/</guid>
      <description>&lt;p&gt;I&amp;#8217;m a bit tired of reinventing the wheel every time I need to deploy a rails app.&lt;/p&gt;

&lt;p&gt;Capistrano has made the good decision to use rake instead of his own DSL so I&amp;#8217;ll follow that path.&lt;/p&gt;

&lt;p&gt;I need a &lt;code&gt;deploy.rake&lt;/code&gt; file with some tasks inside.&lt;/p&gt;

&lt;p&gt;I want to be able to perform ssh commands but I&amp;#8217;d also like a good DSL for this so I ended up using the &lt;a href=&#34;https://github.com/capistrano/sshkit&#34; target=&#34;_blank&#34;&gt;same tool Capistrano uses: sshkit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a very lightweight gem with some good syntactic sugar for ssh commands.&lt;br /&gt;
It basically has four commands that wraps ssh and system commands.&lt;br /&gt;
We can see the use of run_locally and capture in the following task.&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;# run_locally runs a command on your local machine
  # useful if you need to add LOCAL machine pub key to REMOTE machine authorized_keys if not present
     run_locally do         
        within &#39;~&#39; do        
          remote_authorized_keys = capture(&#34;ssh #{MY.deploy_user}@#{MY.machine} &#39;cat ~/.ssh/authorized_keys&#39;&#34;)
          # capture as its name implies captures the stdout of the command and returns a String
          # you can check to see if the the keys include your key
          if !remote_authorized_keys.include?(capture(&#34;cat ~/.ssh/id_rsa.pub&#34;))
            execute(&#34;cat ~/.ssh/id_rsa.pub | ssh #{MY.deploy_user}@#{MY.machine} &#39;mkdir ~/.ssh; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&#39;&#34;)
          end
        end
     end
&lt;/pre&gt;

&lt;p&gt;The other two commands &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt; works together in the following task:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;# test returns true or false
  unless test &#34;[ -d /var/rails ]&#34;
      # execute runs the command
      # accepted syntax --&amp;gt; :sudo, :mkdir, :rails || &#34;sudo mkdir rails&#34; or :sudo, &#34;mkdir #{MY.deploy_to}&#34;
      execute :sudo, :mkdir, :rails   
  end
&lt;/pre&gt;

&lt;p&gt;Armed with sshkit and my understanding of what a simple rails deployment has to do I ended up with the following ideas about my deploy.rake.&lt;/p&gt;

&lt;p&gt;It will be split into several files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Machine Preparation&lt;/li&gt;
&lt;li&gt;Db setup (with specific file for every supported db starting with PostgreSQL)&lt;/li&gt;
&lt;li&gt;Deploy with Git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#8217;m starting with the Deploy part. I&amp;#8217;m assuming the following: use of rvm and Ubuntu 12.04. In any case migrating to different tools should not be too painful!&lt;/p&gt;

&lt;p&gt;The Deploy script will have three basic tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;deploy:setup&lt;/li&gt;
&lt;li&gt;deploy:update&lt;/li&gt;
&lt;li&gt;deploy:rollback&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;deploy:setup will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clone the repo&lt;/li&gt;
&lt;li&gt;run bundle install&lt;/li&gt;
&lt;li&gt;run db:migrate and db:seed&lt;/li&gt;
&lt;li&gt;run assets:precompile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;deploy:update will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetch the last commit&lt;/li&gt;
&lt;li&gt;run bundle install if Gemfile is changed&lt;/li&gt;
&lt;li&gt;run db:migrate if database.yml or db/ folder changed&lt;/li&gt;
&lt;li&gt;run assets:precompile if assets/ folder changed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;deploy:rollback will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check and store if Gemfile, db or assets changed&lt;/li&gt;
&lt;li&gt;rollback db if changed&lt;/li&gt;
&lt;li&gt;revert to previous commit (git back, git back &amp;#8230; git back to where you once belonged)&lt;/li&gt;
&lt;li&gt;bundle install if Gemfile was different&lt;/li&gt;
&lt;li&gt;assets precompile if assets were different&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is not easy to be able to use a remote environment configuration (included a modified $PATH) in ssh (useful if you are in need to use a specifically installed ruby version).&lt;/p&gt;

&lt;p&gt;This is because when you are deploying an app ssh won&amp;#8217;t use an interactive shell but a &lt;strong&gt;non interactive&lt;/strong&gt; one. This means that you basically lose all the &lt;code&gt;.profile .bash_profile .bashrc&lt;/code&gt; configurations.&lt;/p&gt;

&lt;p&gt;To be able to add path and env options to your non interactive shell the only solution (please advice if you have another way to do it) seems to edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, and uncomment this line:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;PermitUserEnvironment yes
&lt;/pre&gt;

&lt;p&gt;Configure the environment you want to be loaded in &lt;code&gt;$HOME/.ssh/environment&lt;/code&gt; and restart sshd.&lt;/p&gt;

&lt;p&gt;This works well but leaves a potential security hole in your machine. This is why I&amp;#8217;m evaluating if it is possible to wrap the needing calls in two tasks that will change the sshd configuration and revert it back. For now I&amp;#8217;ll leave it configured this way.&lt;/p&gt;

&lt;p&gt;The first problem I need to face is how to share configuration parameters between rake files.&lt;/p&gt;

&lt;p&gt;I want to be able to split rake files to have a single file for each concern: &lt;code&gt;machine.rake deploy.rake database.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that I need to require all those files in my main rake file like this:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;# Load all tasks from easy_peasy dir
Dir[&#39;./easy_peasy/*.rake&#39;].each{ |f| require f }
&lt;/pre&gt;

&lt;p&gt;Requiring files means I can&amp;#8217;t use local variables to store configuration data because they won&amp;#8217;t be available.&lt;/p&gt;

&lt;p&gt;So I ended up opting for an OpenStruct which enables options definition on the fly, instantiated in a constant available through files:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;# Configuration data put in an OpenStruct constant 
  # to make them available to all rake files
  MY = OpenStruct.new
  MY.machine = &#39;machine_ip_or_dns&#39;
  MY.deploy_user = &#39;deployer&#39;
  MY.deploy_host = SSHKit::Host.new(&#34;#{MY.deploy_user}@#{MY.machine}&#34;)
  MY.deploy_to   = &#39;deploy_folder&#39;
  MY.remote_path = &#34;/var/rails/#{MY.deploy_to}&#34;
  MY.git_repo    = &#39;git@github.com:user/repo.git&#39;
  MY.git_branch  = &#39;branch&#39;
&lt;/pre&gt;

&lt;p&gt;With this code in place I will be able to call configuration in other files simply by calling:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;MY.deploy_user
&lt;/pre&gt;

&lt;p&gt;Now here is my bare &lt;code&gt;deploy.rake&lt;/code&gt; file with the three actions and comments to explain what&amp;#8217;s going on:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;namespace :deploy do
  desc &#34;Easy Peasy Setup&#34;
  task :setup do 
    # Setup directory and permissions on remote host
    on MY.deploy_host do |host|
      unless test &#34;[ -d #{MY.remote_path} ]&#34;
        within &#34;/var/rails&#34; do
          execute :git, :clone, MY.git_repo 
          execute :bundle, :install
          execute :rake, &#39;db:migrate&#39;
          execute :rake, &#39;db:seed&#39;
          execute :rake, &#39;assets:precompile&#39;
        end
      end
    end
  end

  desc &#34;Easy Peasy Update&#34;
  task :update do
    on MY.deploy_host do |host|
      within MY.remote_path do
        execute :git, :fetch
        execute :git, :reset, &#34;--hard origin/#{MY.git_branch}&#34;
        execute :bundle, :install if test(&#34;git diff HEAD^ HEAD | grep Gemfile&#34;)
        execute :rake, &#39;db:migrate&#39; if test(&#34;git diff HEAD^ HEAD | grep database.yml&#34;) || test(&#34;git diff HEAD^ HEAD -- db/&#34;)
        execute :rake, &#39;assets:precompile&#39; if test(&#34;git diff HEAD^ HEAD -- assets/&#34;)
      end
    end
  end
  
  desc &#34;Easy Peasy Rollback&#34;
  task :rollback do 
    on MY.deploy_host do |host|
      within MY.remote_path do
        # Before gitting back I need to rollback the db
        execute :rake, &#39;db:rollback&#39; if test(&#34;git diff HEAD^ HEAD | grep database.yml&#34;) || test(&#34;git diff HEAD^ HEAD -- db/&#34;)
        # And store Gemfile and assets changes before gitting back
        gem_changes = test(&#34;git diff HEAD^ HEAD | grep Gemfile&#34;)
        assets_changes = test(&#34;git diff HEAD^ HEAD -- assets/&#34;)
        # I then git back
        execute :git, :reset, &#39;--hard HEAD^&#39; 
        # And eventually perform bundle install and assets precompile
        # if there were previous changes
        execute :bundle, :install if gem_changes
        execute :rake, &#39;assets:precompile&#39; if assets_changes
      end
    end
  end
end
&lt;/pre&gt;

&lt;p&gt;The next article will be about the Machine Preparation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multithreaded Rails App 4 REAL</title>
      <link>http://thinkingco.de/techblog/multithreaded-rails-app-4-real/</link>
      <pubDate>Tue, 29 Oct 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/multithreaded-rails-app-4-real/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://rubini.us/2013/10/04/rubinius-2-0-released/&#34;&gt;Rubinius 2.0&lt;/a&gt; (actually 2.1.1) is out and with it rails apps can finally be fully multithreaded taking advantage of multicore processors and substantially reducing memory consumption (&lt;a href=&#34;http://miguelcamba.com/blog/2013/10/05/benchmarking-the-ruby-2-dot-1-and-rubinius-2-dot-0/&#34;&gt;benchmark of latest ruby implementations&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Im currently porting a Rails 2 app to Rails 4. It is a patients management app with also image management.&lt;/p&gt;

&lt;p&gt;Some doctors have up to 4000 patients.&lt;/p&gt;

&lt;p&gt;My aim is to publish an alpha version of the revamped app on my local home server to let the users actually try the changes and be able to change the final output. At the same time the alpha deployment stack will be the same as the production deployment stack that is to say:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rubinius 2.x&lt;/li&gt;
&lt;li&gt;rvm&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Puma&lt;/li&gt;
&lt;li&gt;Capistrano&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually my home server hosts my wordpress website served by apache2 on a debian distribution.&lt;/p&gt;

&lt;p&gt;So here goes my project&amp;#8217;s shopping list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Rubinius 2.1.1&lt;/li&gt;
&lt;li&gt;Install nginx and make it serve the rails puma app while still serving the apache2 installed sites&lt;/li&gt;
&lt;li&gt;Install puma and let it start as a daemon&lt;/li&gt;
&lt;li&gt;Configure Capistrano to deploy the alpha Rails 4 app to the selected stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First thing first just get rvm and install it:&lt;/p&gt;

&lt;p&gt;As stated on &lt;a href=&#34;http://rubini.us/2013/09/22/ready-set/&#34; target=&#34;_blank&#34;&gt;rubinius blog&lt;/a&gt; to build rubinius 2 you either need rubinius master or ruby MRI 2. But luckily rvm automatically installs the MRI 2 for you so &amp;#8220;all you need is &lt;a href=&#34;http://rvm.io&#34; target=&#34;_blank&#34;&gt;love!&amp;#8221; for rvm which needs some money for its version 2&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This will install MRI 2 and rubinius 2.1.1 (at writing time).&lt;/p&gt;

&lt;p&gt;So now that we have rubinius installed let&amp;#8217;s proceed with our world domination program and see how we can install nginx and configure it as a reverse proxy to serve this wordpress site running on apache 2 (if you can read this it&amp;#8217;s working …. phew)!&lt;/p&gt;

&lt;p&gt;Just one thing to note, you need to set the &lt;code&gt;client_max_body_size&lt;/code&gt; to use the automatic wordpress updates and installation of themes and plugins from zip files located on your device. Next we need to configure Apache 2 to listen on a different port than 80, I&amp;#8217;m using 8080. Change &lt;code&gt;/etc/apache2/ports.conf&lt;/code&gt;, &lt;code&gt;/etc/apache2/apache2.conf&lt;/code&gt; and every virtual host directive to listen and answer to port 8080:&lt;/p&gt;

&lt;p&gt;Restarting Apache and reloading nginx will bring online the new web server asset serving rails apps through nginx and php apps through apache2.&lt;/p&gt;

&lt;p&gt;Next we need to install puma and configure nginx to serve puma applications. As I&amp;#8217;m deploying a rails 4 app installing puma means adding a gem to my &lt;code&gt;Gemfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and then doing a &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we configure nginx to serve a puma app listening on a unix socket. We add a site to &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt; and paste this configuration inside it:&lt;/p&gt;

&lt;p&gt;The paths in the configuration are based on my Capistrano &lt;code&gt;deploy.rb&lt;/code&gt; which we&amp;#8217;ll see in a minute. It&amp;#8217;s a git based capistrano recipe using a &lt;code&gt;web&lt;/code&gt; prefix folder.&lt;/p&gt;

&lt;p&gt;Next we need to configure puma and capistrano in our app modifying &lt;code&gt;config/puma.rb&lt;/code&gt; and &lt;code&gt;config/deploy.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/puma/puma/blob/master/examples/config.rb&#34; target=&#34;_blank&#34;&gt;puma.rb example file&lt;/a&gt; to get you started, here is my puma configuration:&lt;/p&gt;

&lt;p&gt;The puma init.d script which will take care of starting and stopping puma daemons for every rails app is:&lt;/p&gt;

&lt;p&gt;And now the core of every Rails deployment &amp;#8230; the &lt;code&gt;deploy.rb&lt;/code&gt; file in all its glory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO YOU REALLY WANT A 500 LINES DEPLOY SCRIPT BACKED BY A FULL GEM?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m tired of handling resources, shared, current and all the rvm, bundler tricks without knowing exactly what I&amp;#8217;m doing so please see my &lt;a href=&#34;http://thinkingco.de/2013/uncategorized/easy-peasy-deploy&#34;&gt;next post for an easy peasy deploy solution in Rails&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;Uomo è maggiormente confortato dai paradossi G.K. Chesterton</title>
      <link>http://thinkingco.de/blog/luomo-e-maggiormente-confortato-dai-paradossi-g-k-chesterton/</link>
      <pubDate>Wed, 14 Aug 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/blog/luomo-e-maggiormente-confortato-dai-paradossi-g-k-chesterton/</guid>
      <description>&lt;p&gt;Introduzione al Libro di Giobbe di G. K. Chesterton (tradotto da me in italiano)&lt;/p&gt;

&lt;p&gt;Il libro di Giobbe é, nell’ambito degli Altri libri del Vecchio Testamento, sia un enigma filosofico che un enigma storico.&lt;/p&gt;

&lt;p&gt;Quello che ci riguarda per un’introduzione come questa é l’enigma filosofico; possiamo quindi occuparci prima brevemente di una generica avvertenza che deve essere affrontata relativamente all’aspetto storico.&lt;/p&gt;

&lt;p&gt;A lungo é divampata la controversia su quali parti di questo racconto epico appartengano allo schema originale e quali invece siano interpolazioni di epoche considerevolmente successive. Gli studiosi sono in disaccordo tra loro, come é proprio del loro mestiere fare; in generale peró la tendenza dell’investigazione é sempre stata quella di ritenere che le parti interpolate, se ve ne sono, si limitino al prologo e all’epilogo ed eventualmente al discorso del giovane uomo che presenta un’apologia al proprio termine. Non affermo assolutamente di essere competente per dirimere tali questioni. Ma a qualunque decisione giunga il lettore a loro riguardo, c’é, connessa ad esse, una verità generale da ricordare. Quando ci si trova davanti ad un’antica creazione artistica non si deve supporre che ci sia qualcosa contro di essa se si afferma che é cresciuta gradualmente. Il Libro di Giobbe puó essere cresciuto gradualmente tanto quanto l’Abbazia di Westminster. Ma le persone che creavano l’antica poesia popolare, come quelle che costruivano l’Abbazia di Westminster, non attribuivano un grande valore alla datazione effettiva né all’effettivo autore, importanza che é in misura quasi esclusiva una creazione dell’insano individualismo dei tempi moderni. Possiamo mettere da parte il caso del libro di Giobbe in quanto complicato dal fattore religioso e prenderne un altro qualsiasi, diciamo quello dell’Iliade. Molte persone hanno mantenuto la formula caratteristica dello scetticismo moderno, che Omero non venne scritto da Omero, ma da un’altra persona con lo stesso nome. Allo stesso modo molti hanno sostenuto che Mosé non fosse Mosé ma un’altra persona di nome Mosé. Ma quello che occorre ricordare rispetto all’Iliade é che se qualcuno vi avesse di fatto aggiunto dei passaggi interpolati, la cosa non avrebbe prodotto lo shock creato da un simile procedimento nei nostri tempi individualistici. La creazione dell’epica tribale veniva concepita entro certi limiti come un lavoro tribale, come la costruzione del tempio tribale. Si puó credere dunque, se lo si desidera, che il prologo di Giobbe, il suo epilogo e il discorso di Eliú siano passaggi inseriti nel testo dopo la composizione dell’opera originale. Ma non é altresí lecito supporre che tali inserzioni abbiano quell’ovvio carattere spurio che avrebbe una qualsiasi inserzione in un moderno libro individualistico. Non si possono trattare tali inserzioni come si farebbe con un capitolo nell’opera di George Meredith che si venisse poi a scoprire non essere scritto da George Meredith, o metà di una scena in Ibsen che si scoprisse esservi stata furbescamente infilata da Mr. William Archer. E’ necessario ricordare che l’antico mondo che produsse questi antichi poemi come l’Iliade o Giobbe, manteneva sempre la tradizione di ció che stava realizzando. Un uomo avrebbe quasi potuto lasciare un poema al proprio figlio per portarlo a termine come egli lo avrebbe portato a termine. Quella che viene chiamata unità Omerica può essere un fatto storico o non esserlo. L&amp;rsquo;Iliade potrebbe essere stata scritta da un solo uomo o forse da centinaia di uomini. Ma occorre ricordarsi che a quei tempi c&amp;rsquo;era più unità in un centinaio di uomini che quanta se ne trova oggi in un unico uomo. Allora una città era come un solo uomo. Oggi un uomo è come una città durante una guerra civile.&lt;/p&gt;

&lt;p&gt;Senza perciò addentrarsi ulteriormente nelle questioni di unità dell&amp;rsquo;opera come concepite dagli studiosi, possiamo dire del loro enigma che il libro ha unità e coerenza nello stesso senso in cui tutte le grandi creazioni tradizionali le hanno; nello stesso senso in cui ha unità e coerenza la Cattedrale di Canterbury. La stessa cosa è ampiamente valida anche per quello che ho chiamato l&amp;rsquo;enigma filosofico. C&amp;rsquo;è un motivo reale per il quale il Libro di Giobbe si distingue dalla maggior parte degli altri libri inclusi nel canone dell&amp;rsquo;Antico Testamento. Ma anche in questo caso si sbagliano coloro che insistono in una sua completa assenza di unità.&lt;/p&gt;

&lt;p&gt;Si sbagliano coloro che sostengono che l&amp;rsquo;Antico Testamento è semplicemente una raccolta di libri scollegati tra loro; senza nè coerenza nè obiettivi. Sia che il risultato sia stato ottenuto attraverso una qualche verità spirituale soprannaturale o da una salda tradizione nazionale o semplicemente da un&amp;rsquo;ingegnosa selezione effettuata in epoche successive, i libri dell&amp;rsquo;Antico Testamento hanno un&amp;rsquo;unità facilmente percepibile. Cercare di comprendere l&amp;rsquo;Antico Testamento senza realizzare questa idea di fondo sarebbe altrettanto assudo come studiare una delle opere teatrali di Shakespeare supponendo che l&amp;rsquo;autore non avesse alcun obiettivo filosofico nello scriverla. Sarebbe come se un uomo volesse leggere la storia di Amleto, Principe di Danimarca, continuando a pensare per tutto il tempo di stare leggendo in realtà la storia di un vecchio principe pirata Danese. Un tale lettore non riuscirebbe mai a capire l&amp;rsquo;intenzionalità del procrastinare di Amleto da parte del poeta. Direbbe semplicemente, &amp;#8220;L&amp;rsquo;eroe di Shakespeare impiega moltissimo tempo per uccidere il proprio nemico&amp;#8221;. Così parlano anche i distruttori della Bibbia, che sfortunatamente al fondo sono anche suoi adoratori. Non comprendono il tono speciale dell&amp;rsquo;Antico Testamento; non comprendono la sua idea di fondo che è quella secondo la quale tutti gli uomini sono solamente strumenti di una potenza più grande.&lt;/p&gt;

&lt;p&gt;Coloro che ad esempio si lamentano delle atrocità e dei tradimenti dei giudici e dei profeti di Israele hanno in realtà nelle loro teste una nozione che non ha nulla a che vedere con l&amp;rsquo;argomento. Sono troppo Cristiani. Cercano di leggere nelle scritture pre Cristiane l&amp;rsquo;idea puramente Cristiana dei santi, l&amp;rsquo;idea cioè che i principali strumenti di Dio siano uomini particolarmente buoni. Questa è un&amp;rsquo;idea più profonda, audace e interessante della vecchia idea Giudea. E&amp;rsquo; l&amp;rsquo;idea che l&amp;rsquo;innocenza porti con se qualche cosa di terribile che nel tempo crea e ricrea gli imperi e il mondo stesso. Ma l&amp;rsquo;idea che soggiace all&amp;rsquo;Antico Testamento è un&amp;rsquo;idea che possiamo definire di buon senso, secondo la quale la forza è la forza, l&amp;rsquo;astuzia è l&amp;rsquo;astuzia, il successo nel mondo è il successo nel mondo e Geova utilizza tutte queste cose per i Propri fini ultimi allo stesso modo in cui utilizza le forze naturali o gli elementi fisici. Egli utilizza la forza di un&amp;rsquo;eroe come utilizzerebbe quella di un Mammut senza alcun particolare rispetto per il Mammut. Non riesco a comprendere come sia possibile che così tanti scettici semplicioni abbiano letto delle storie come quelle della frode di Giacobbe e abbiano supposto che l&amp;rsquo;uomo che le ha raccontate (chiunque egli fosse) non si fosse reso conto che Giacobbe era un vigliacco altrettanto chiaramente di quanto ce ne rendiamo conto noi. Il senso umano primordiale dell&amp;rsquo;onore non ha la possibilità di cambiare così tanto. Ma questi scettici semplicioni sono, come la maggioranza degli scettici moderni, dei Cristiani.&lt;br /&gt;
Si immaginano che i patriarchi vadano intesi come dei modelli; si immaginano che Giacobbe venga raccontato come una specie di santo; e in questo caso non mi meraviglio affatto che si ritrovino un po&amp;rsquo; spaventati. Questa non è affatto l&amp;rsquo;atmosfera dell&amp;rsquo;Antico Testamento. Gli eroi dell&amp;rsquo;Antico Testamento non sono figli di Dio ma schiavi di Dio, schiavi giganti e terribili, come il geni, che erano gli schiavi di Aladino.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;idea centrale di una gran parte dell&amp;rsquo;Antico Testamento potrebbe essere definita come quella della solitudine di Dio. Dio non è solamente il personaggio principale dell&amp;rsquo;Antico Testamento; Dio è propriamente l&amp;rsquo;unico personaggio dell&amp;rsquo;Antico Testamento. Paragonata alla chiarezza dei Suoi obiettivi tutte le altre volontà sono pesanti ed automatiche, come quelle degli animali; paragonati alla Sua realtà tutti i figli della carne sono come ombre. Questa sottolineatura viene ripetuta più e più volte, &amp;#8220;Chi gli ha dato consiglio?&amp;#8221; &amp;#8220;Nel tino ho pigiato io da solo, del mio popolo nessuno era con me.&amp;#8221; Tutti i patriarchi ed i profeti sono semplicemente i Suoi strumenti o le Sue armi; perchè il Signore è un uomo di guerra. Utilizza Joshua come un&amp;rsquo;ascia o Mosè come un regolo. Per Lui Sansone è solamente una spada ed Isaia una tromba. I santi della Cristianità sono chiamati ad essere come Dio, come se fossero piccole statuette che raffigurano Dio. All&amp;rsquo;eroe dell&amp;rsquo;Antico Testamento non si richiede affatto di avere la stessa natura di Dio non più che a una sega o a un martello si richiede che abbiano la stessa forma del carpentiere.&lt;/p&gt;

&lt;p&gt;Questa è la principale chiave di lettura e caratteristica delle scritture dell&amp;rsquo;Ebraismo prese come un tutt&amp;rsquo;uno. Ci sono in verità nelle scritture innumerevoli istanze di rude umorismo, di forti emozioni e di vigorose individualità che non mancano mai nelle prose e nelle poesi primitive. Tuttavia la caratteristica principale rimane; non solamente il senso che Dio sia più forte dell&amp;rsquo;uomo, non solamente che Dio sia più segreto dell&amp;rsquo;uomo, ma che Egli sia più significativo, che Egli sappia meglio di chiunque altro ciò che sta facendo, che paragonati a Lui noi abbiamo qualcosa di quella vaghezza, irragionevolezza e nomadismo delle bestie che periscono. &amp;#8220;E&amp;rsquo; lui che siede sulla terra, i cui abitanti da lassù sono come cavallette.&amp;#8221; Possiamo quasi affermarlo. Il libro è così intento ad affermare la personalità di Dio che quasi afferma l&amp;rsquo;impersonalità dell&amp;rsquo;uomo. A meno che questo cervello gigante e cosmico non abbia concepito una cosa, quella cosa è incerta e vuota; l&amp;rsquo;uomo non ha sufficiente tenacia per assicurare che essa permanga. &amp;#8220;Se il Signore non costruisce la casa, invano lavorano i costruttori. Se il Signore non custodisce la città invano veglia la sentinella&amp;#8221;.&lt;/p&gt;

&lt;p&gt;In ogni altra parte dell&amp;rsquo;Antico Testamento quindi si esalta l&amp;rsquo;obliterazione dell&amp;rsquo;uomo se paragonato al volere divino. Il Libro di Giobbe invece da questo punto di vista si differenzia perchè è l&amp;rsquo;unico in cui si pone la domanda, &amp;#8220;Ma qual è il volere di Dio? Vale la pena sacrificare anche la nostra misera umanità per tale volere? Naturalmente sarebbe facile cancellare le nostre meschine volontà per una volontà più grande e buona. Ma è effettivamente rale la volontà di Dio? Lasciamo che Dio utilizzi i suoi strumenti e lasciamo pure che li rompa. Ma cosa sta facendo e per cosa li stà distruggendo?&amp;#8221;. E&amp;rsquo; a causa di questa domanda che dobbiamo aggredire l&amp;rsquo;enigma del Libro di Giobbe come un enigma filosofico.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;importanza attuale del Libro di Giobbe non può essere espressa adeguatamente neanche dicendo che è il più interessante tra i libri antichi. Potremmo quasi dire del Libro di Giobbe che è il più interessante tra i libri moderni. In verità, naturalmente, nessuna delle due frasi riesce a rendere la questione perchè sia la religione che l&amp;rsquo;irreligione dell&amp;rsquo;uomo sono entrambe allo stesso tempo antiche e nuove; la filosofia o è eterna o non è filosofia. L&amp;rsquo;abitudine moderna di dire, &amp;#8220;Questa è la mia opinione, ma posso sbagliarmi&amp;#8221;, è completamente irrazionale. Se sostengo che posso sbagliarmi affermo qualcosa che non è la mia opinione. L&amp;rsquo;abitudine moderna di dire &amp;#8220;Ogni uomo ha una sua filosofia; questa è la mia e mi si adatta; l&amp;rsquo;abitudine ad affermare questo è sintomo di una debolezza di mente.&lt;/p&gt;

&lt;p&gt;Una filosofia cosmica non è costruita per adattarsi ad un uomo; una filosofia cosmica viene costruita per spiegare il cosmo. Un uomo può possedere una religione privata tanto quanto può possedere un sole o una luna privati. La prima tra le bellezze intellettuali del Libro di Giobbe è che tratta in maniera predominante di questo desiderio di conoscere la realtà; il desiderio di conoscere l&amp;rsquo;essere e non meramente l&amp;rsquo;apparenza. Se fossero stati degli uomini moderni a scrivere il libro avremmo probabilmente scoperto che Giobbe e coloro che gli prestano conforto si sarebbero trovati d&amp;rsquo;accordo e che le loro differenze andavano attribuite al loro differente temperamento. Avrebbero chiamato gli amici di Giobbe &amp;#8220;ottimisti&amp;#8221; e Giobbe &amp;#8220;pessimista&amp;#8221;. E si sarebbero trovati a loro agio, come spesso accade alle persone, almeno per qulche tempo, concordi nell&amp;rsquo;affermare una cosa palesemente falsa. Perchè ammesso e non concesso che la parola &amp;#8220;pessimista&amp;#8221; abbia un qualsivoglia significato, Giobbe non è decisamente un pessimista. Il suo caso da solo è sufficiente per rifiutare la moderna assurdità di riferire tutto al temperamento fisico. Giobbe in nessun senso guarda alla vita in maniera cupa. Se desiderare di essere felice ed essere ben pronto ad esserlo sono carattaristiche di un ottimista, Giobbe è un ottimista. E&amp;rsquo; un ottimista perplesso; un ottimista esasperato; un ottimista indignato ed insultato. Desidera che l&amp;rsquo;universo si giustifichi, non perchè desideri coglierlo in fallo ma perchè egli desidera veramente che venga giustificato. Domanda una spiegazione da Dio, ma non con lo spirito con cui Hampden potrebbe domandare una spiegazione a Carlo I. Lo fa nello stesso modo in cui una moglie potrebbe domandare una spiegazione da un marito per cui prova un profondo rispetto. Protesta con il suo Creatore perchè è orgoglioso del suo Creatore. Parla persino dell&amp;rsquo;Onnipotente come di un suo avversario, ma non dubita mai fino in fondo, che il suo nemico abbia delle ragioni che egli non riesce a comprendere.  Con un genere di blasfemia raffinato e famoso dice, &amp;#8220;Oh se il mio avversario avesse scritto un libro!&amp;#8221;. Non gli passa per la testa che sarebbe potuto essere un brutto libro. E&amp;rsquo; ansioso di farsi convincere, ossia crede che Dio lo possa convincere. In breve, possiamo ripeterci dicendo che se la parola ottimista ha un qualche significato (cosa di cui io dubito) Giobbe è un ottimista. Scuote i pilastri del mondo e attacca follemente i cieli; sferza le stelle, ma non per ridurle al silenzio; perchè gli diano una risposta. Allo stesso modo possiamo parlare degli ottimisti ufficiali, gli amici che confortano Giobbe. Di nuovo se la parola pessimista ha un qualche significato (ed io ne dubito) coloro che confortano Giobbe possono senza dubbio essere chiamati pessimisti e non ottimisti. Tutto ciò in cui essi credono non è che Dio è buono ma che Dio è così forte che è molto più giudizioso chiamarLo buono. Sarebbe un&amp;rsquo;eccesso di biasimo chiamarli evoluzionisti; tuttavia essi presentano alcuni aspetti dell&amp;rsquo;errore vitale dell&amp;rsquo;ottimista evoluzionista. Continueranno a ripetere che ogni cosa nell&amp;rsquo;universo si adatta a tutte le altre: come se ci fosse qualche cosa di consolatorio in un numero di cose sgradevoli che si adattano le une alle altre. Vedremo più avanti come Dio nel grande climax del poema ribalta completamente questo tipo di argomentazione.&lt;/p&gt;

&lt;p&gt;Quando, alla fine del poema, Dio si fa presente (in qualche modo in maniera improvvisa), viene suonata l&amp;rsquo;imprevista e splendida nota che rende la cosa grandiosa quale di fatto è. Tutti gli esseri umani presenti nella storia, e specialmente Giobbe, hanno posto a Dio delle domande. Un poeta più triviale avrebbe fatto entrare Dio nella storia per fargli in un senso o nell&amp;rsquo;altro rispondere a tutte le domande. Ma grazie ad un tocco che occorre sicuramente definire come ispirato, quando Dio entra in scena, lo fa per porre una serie ulteriore di domande per Suo conto. In questo dramma dello scetticismo Dio stesso assume il ruolo dello scettico. Egli fa ciò che tutte le grandi voci che difendono la religione hanno sempre fatto. Fa ad esempio ciò che fece Socrate. Rivolta il razionalismo contro se stesso. Sembra affermare che se si tratta di porre domande, Egli può porre alcune domande in grado di gettare a terra ed abbattere tutti i concepibili interrogatori umani. Il poeta grazie ad una squisita intuizione fa si che Dio accetti ironicamente una sorta di polemica uguaglianza con i Suoi accusatori. Ha il desiderio di considerarlo come un equo duello intellettuale: &amp;#8220;Gird up now thy loins like a man; for I will demand of thee, and answer thou me.&amp;#8221; L&amp;rsquo;eterno adotta un&amp;rsquo;enorme e sardonica umiltà. Egli desidera essere processato. Chiede solamente il diritto che ogni persona sotto processo possiede; Egli chiede di poter contro interrogare i testimoni del processo. E si spinge ancora oltre nella correttezza del parallelo legale. La prima domanda che infatti pone a Giobbe è la domanda che ogni criminale accusato da Giobbe avrebbe il diritto di porgli. Chiede a Giobbe chi è. E Giobbe, essendo un uomo dall&amp;rsquo;intelletto sincero, si prende un po&amp;rsquo; di tempo per rifletterci e giunge alla conclusione che non lo sa.&lt;/p&gt;

&lt;p&gt;Questo è il primo grande fatto da notare relativamente al discorso di Dio, che rappresenta il culmine della ricerca. Rappresenta tutti gli scettici umani sradicati da un supriore scetticismo. E&amp;rsquo; questo metodo, talvolta utilizzato da menti supreme ed altre volte da menti mediocri, che è divenuto l&amp;rsquo;arma logica di ogni vero mistico. Socrate, come ho già detto, lo utilizzò quando dimostrò che se gli fosse stata consentita una sufficiente dose di sofismo avrebb potuto distruggere tutti i sofisti. Gesù Cristo l&amp;rsquo;ha utilizzato quando ricordò ai Sadducei, che il fatto che non riuscivano ad immaginare la natura del matrimonio in paradiso significava semplicemente che non riuscivano ad immaginare la natura del matrimonio tout cours. Nella spaccatura della teologia Cristiana nel diciottesimo secolo, Butler lo utilizzò, quando sottolineò che gli argomenti razionalistici potrebbero essere utilizzati tanto contro una vaga religione quanto contro una religone dottrinale, tanto contro un&amp;rsquo;etica razionalista quanto contro quella Cristiana. E&amp;rsquo; la radice e la ragione del fatto che uomini che hanno una fede religiosa hanno anche un dubbio filosofico, come il Cardinale Newman, il Sig. Balfour o il Sig. Mallock. Questi sono i piccoli rivoli del delta di quel fiume che ha nel Libro di Giobbe la prima grande cataratta che crea il fiume. Nel trattare con l&amp;rsquo;arrogante assertore del dubbio, non è metodologicamente utile dirgli di smettere di dubitare. Piuttosto è corretto spingerlo a continuare a dubitare, a dubitare un altro po&amp;rsquo;, a mettere in dubbio ogni giorno nuove e più folli cose nell&amp;rsquo;universo, finchè alla fine, a causa di una qualche strana illuminazione, possa iniziare a mettere in dubbio se stesso. Questo, come ho detto, è il primo fatto rilevante del discorso; la geniale intuizione per la quale Dio giunge alla fine non per risolvere gli enigmi, ma per proporli. L&amp;rsquo;altro grande fatto che insieme a questo rende l&amp;rsquo;intero lavoro religioso invece che filosofico, è l&amp;rsquo;altra incredibile sorpresa per la quale Giobbe è immediatamente soddisfatto dalla semplice esposizione di qualche cosa di impenetrabile. Dal punto di vista lessicale gli enigmi di Geova sono più oscuri e desolati di quelli di Giobbe; e tuttavia Giobbe che era inconsolabile prima dal discorso di Geova e dopo di esso si sente totalmente confortato. Non gli è stato detto nulla, ma egli percepisce l&amp;rsquo;atmosfera e il terribile formicolio di qualche cosa che è troppo bella per essere detta. Il rifiuto di Dio di spiegare i propri piani è in se stesso un indizio bruciante dei Suoi piani. Gli enigmi di Dio sono più soddisfacenti delle soluzioni dell&amp;rsquo;uomo. Terzo, ovviamente, è uno dei colpi da maestro di Dio quello di redarguire alla stessa maniera tanto l&amp;rsquo;uomo che Lo accusava che quelli che lo divendevano abbattendo con lo stesso martello tanto gli ottimisti quanto i pessimisti. Ed è in connessione con i meccanici ed altezzosi confortatori di Giobbe che avviene la ancora più profonda e sottile inversione di cui ho parlato. L&amp;rsquo;ottimista meccanico cerca dichiaratamente di giustificare l&amp;rsquo;universo sulla base del fatto che si tratta di un modello razionale e legato dal meccanismo di causa effetto. Sottolinea il fatto che il mondo è bello perchè tutto può essere spiegato. E questo è invece l&amp;rsquo;unico punto, se posso dirlo così, sul quale Dio è esplicito fino alla violenza. In effetti, Dio dice che se c&amp;rsquo;è una cosa buona del mondo, per quanto concerne gli uomini, è che esso non può essere spiegato. Insiste sull&amp;rsquo;inesplicabilità di ogni cosa; &amp;#8220;La pioggia ha forse un padre? &amp;#8230; Da quale grembo proviene il ghiaccio?&amp;#8221; si spinge oltre e insiste sull&amp;rsquo;inconfutabile ed evidente irragionevolezza delle cose; &amp;#8220;Hai tu inviato la pioggia nel deserto in cui non è alcun uomo, e nelle regioni selvagge in cui non c&amp;rsquo;è alcun uomo=&amp;#8221; Dio farà in modo che l&amp;rsquo;uomo veda le cose, fosse anche solamente contro il nero sfondo della non esistenza. Dio farà in modo che Giobbe veda un universo sorprendente anche se può farlo unicamente facendo in modo che Giobbe ne veda uno idiota. Per meravigliare l&amp;rsquo;uomo Dio diviene per un solo istante blasfemo; si potrebbe quasi dire che Dio diviene ateo per un istante. Spiega di fronte a Giobbe un lungo panorama delle cose create, il cavallo, l&amp;rsquo;aquila, il corvo, l&amp;rsquo;onagro, il pavone, lo struzzo, il coccodrillo. Descrive ognuno di essi in maniera tale che sembrino mostri che camminano sotto la luce del sole. Complessivamente siamo di fronte ad un salmo o una rapsodia del senso della meraviglia. Il creatore di tutte le cose è Lui stesso stupefatto dalle cose che Egli stesso ha creato. Possiamo chiamare questo il terzo punto. Giobbe propone un punto interrogativo; Dio risponde con un punto esclamativo. Invece di dimostrare a Giobbe che ci troviamo in un mondo che siamo in grado di spiegare, Egli insiste che si tratta di un mondo molto più strano di quello che Giobbe abbia mai pensato. A conclusione del discorso di Dio il poeta ha inoltre ottenuto, con quell&amp;rsquo;accuratezza artistica inconscia che si trova in molte delle epiche più semplici, un ulteriore e più sottile obiettivo. Senza mai fare concessioni alla rigida impenetrabilità di Geova nelle Sue esplicite dichiarazioni, egli ha lasciato cadere qua e là nel testo delle metafore, di immaginario parentetico, suggerimenti improvvisi e splendidi che il segreto di Dio è un segreto luminoso e non triste, suggerimenti semi accidentali, come il bagliore di una luce vista per un istente attraverso le fessure di una porta chiusa. Sarebbe difficile smettere di apprezzare, in un senso puramente poetico, l&amp;rsquo;istintiva disinvoltura ed esattezza con cui queste insinuazioni ottimistiche vengono lasciate cadere all&amp;rsquo;interno di altre connessioni, come se l&amp;rsquo;Onnipotente stesso fosse appena consapevole di averle lasciate cadere. C&amp;rsquo;è ad esempio quel famoso passaggio in cui Geova, con sarcasmo devastante, chiede a Giobbe dove fosse lui quando venivano gettate le fondamenta del mondo, e quindi (come se stesse semplicemente fissando una data) menziona i tempi in cui i figli di Dio gridavano di gioia. Non si può fare a meno di ritenere, anche sulla base di questa scarna informazione, che ci sia stata qualche cosa per cui valesse la pena gridare. O ancora quando Dio parla della neve e della grandine nella semplice elencazione del cosmo fisico, Egli parla di esse come un tesoro che risparmiato per il giorno della battaglia, un indizio di un qualche enorme Armageddon in cui il male verrà alla fine rovesciato.&lt;/p&gt;

&lt;p&gt;Nulla potrebbe essere migliore, dal punto di vista artistico, che questo ottimismo che irrompe attraverso l&amp;rsquo;agnosticismo come oro ardente sui bordi di una nera nuvola. Coloro che guardano con disprezzo alle origini barbariche dell&amp;rsquo;epica possono ritenere fantasioso leggere un tale significato artistico in tali casuali similitudini o frasi accidentali. Ma nessuno che conoscenza bene i grandi esempi della poesia semi barbara, come la Canzone di Rolando o le vecchie ballate, cadrà in questo errore. Nessuno che sappia cos&amp;rsquo;è la poesia primitiva può non riconoscere che, mentre la sua forma cosciente è semplice alcune delle sue conseguenze più pregiate sono assai fini. L&amp;rsquo;Iliade si sforza di trasmettere l&amp;rsquo;idea che Ettore e Sarpedone abbiano un certo atteggiamento o tono di triste e cavalleresca rassegnazione, non sufficientemente amara da essere chiamata pessimismo nè sufficientemente gioviale da essere chiamata ottimismo; Omero non avrebbe mai potuto dire questo con parole elaborate. Ma riesce in qualche modo riesce a comunicarlo con quelle semplici. La Canzone di Rolando fa in modo di esprimere l&amp;rsquo;idea che la Cristianità impone sui propri eroi un paradosso: quello di una grande umiltà nei confronti dei propri peccati combinato con la grande ferocia riguardo alle proprie idee. Naturalmente la Canzone di Rolando non può dire ciò ma riesce a trasmetterlo. Allo stesso modo debbono essere accreditati al Libro di Giobbe molti fini effetti che pur non essendo nella mente dell&amp;rsquo;autore erano indubbiamente nella sua anima. E di tutti questi quello che è di gran lunga il più importante rimane ancora da enunciare. Non conosco e dubito che lo sappiano anche gli studiosi, se il Libro di Giobbe abbia avuto grandi conseguenze o una qualsivoglia conseguenza nello sviluppo del pensiero ebraico. Ma se ha avuto effettivamente tale effetto li può aver salvati da un enorme collasso e decadenza. In questo libro viene infatti posta la domanda se Dio punisca invariabilmente il vizio con una punizione terrena e ricompensi la virtù con una prosperità terrena. Se gli Ebrei avessero risposto a questa domanda nella maniera sbagliata avrebbero potuto perdere tutta la loro successiva influenza nella storia dell&amp;rsquo;umanità. Sarebbero addirittura potuti affondare al livello della moderna società perbenista. Perchè una volta che le persone abbiano iniziato a credere che la prosperità è la ricompensa della virtù diventa ovvia la loro successiva calamità. Se la prosperità è considerata ricompensa della virtù sarà considerata anche un suo sintomo. Gli uomini lasceranno il gravoso compito di far si che gli uomini buoni abbiano successo e abbracceranno quello molto più facile di trasformare in buoni gli uomini di successo. Questo processo, evidente in tutto il commercio e il giornalismo moderni, è l&amp;rsquo;ultima nemesi del malvagio ottimismo di coloro che confortano Giobbe. Se gli Ebrei ne sono stati preservati, li ha salvati il Libro di Giobbe. Il Libro di Giobbe è rimarchevole principalmente, come ho insistito in tutta l&amp;rsquo;esposizione, per il fatto che non si conclude in un modo convenzionalmente percepito come soddisfacente. A Giobbe non viene detto che le sue sofferenze erano dovute ai propri peccati o erano parte di un qualche piano per il suo miglioramento.&lt;/p&gt;

&lt;p&gt;Ma nel prologo vediamo Giobbe tormentato non perchè fosse il peggiore degli uomini, ma perchè era il migliore. La lezione che apprendiamo dall&amp;rsquo;intera opera è che l&amp;rsquo;uomo è confortato principalmente dai paradossi. E qui c&amp;rsquo;è il più oscuro e strano dei paradossi; ed è, per testimonianza di tutta l&amp;rsquo;umanità il più rassicurante. Non ho bisogno di suggerire quale suprema e strana storia attendeva questo paradosso dell&amp;rsquo;uomo migliore nel peggior destino. Non c&amp;rsquo;è bisogno di dire che nel senso più libero e filosofico qui abbiamo una figura dell&amp;rsquo;Antico Testamento che è veramente un simbolo; nè di suggerire cosa venga prefigurato nelle ferite di Giobbe.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tailing problems in Windows</title>
      <link>http://thinkingco.de/techblog/tailing-problems-in-windows/</link>
      <pubDate>Sun, 17 Feb 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/tailing-problems-in-windows/</guid>
      <description>&lt;p&gt;I built this beautiful dashboard collecting data from different sensors on a high efficiency vehicle.&lt;/p&gt;

&lt;p&gt;I opted for an html page with server-events.&lt;/p&gt;

&lt;p&gt;Now I need to tail two files every 0.2 seconds and those files are uptaded every 0.2 seconds. These in Windows 7 brings up random errors when tail.exe tries to read a file that&amp;#8217;s being updated in the same exact instant.&lt;/p&gt;

&lt;p&gt;This means that &lt;strong&gt;tail.exe uses file reading with an exclusive lock&lt;/strong&gt; &amp;#8230;. very baaaad!&lt;/p&gt;

&lt;p&gt;I wondered if powershell had a non locking mechanism for reading content from files.&lt;/p&gt;

&lt;p&gt;I whipped up something with Set-Content and Get-Content but to no avail because Get-Content seems to use a reading exclusive lock too!&lt;/p&gt;

&lt;p&gt;So I invoked the powers of ruby flock (f-ile lock) to overcome this problem.&lt;/p&gt;

&lt;p&gt;Try this on windows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;launch the writing.rb process&lt;/li&gt;
&lt;li&gt;launch as many reading.rb processes you want&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will find no problems nor errors!&lt;/p&gt;

&lt;p&gt;For &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.3/File.html#method-i-flock&#34;&gt;more info on ruby flock options&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elezioni 2013</title>
      <link>http://thinkingco.de/blog/elezioni-2013/</link>
      <pubDate>Tue, 05 Feb 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/blog/elezioni-2013/</guid>
      <description>&lt;p&gt;Si avvicina l&amp;#8217;unico momento in cui la &amp;#8220;democrazia&amp;#8221; ci fornisce la possibilità (sia pure porcellanamente limitata) di dire la nostra su quello che sarà il comune destino per i prossimi 4 anni.&lt;/p&gt;

&lt;p&gt;Normalmente ho approcciato questo momento con sensazioni più o meno forti di nausea e ho sempre finito per non essere in grado di votare quello che tutti continuavano a definire come il male minore. In tutta coscienza non me la sono mai sentita di dare il mio voto a uno qualsiasi dei teatranti che animavano e animano ormai da &lt;sup&gt;30&lt;/sup&gt;&amp;frasl;&lt;sub&gt;40&lt;/sub&gt; anni quella farsa che chiamiamo la repubblica (minuscolo) italiana.&lt;/p&gt;

&lt;p&gt;Già agli inizi del 900 Chesterton parlava di &amp;#8220;incredibili coincidenze democratiche&amp;#8221; guardando a come nel parlamento inglese fossero presenti sempre gli stessi cognomi perpetuati di generazione in generazione.&lt;/p&gt;

&lt;p&gt;La farsa consiste nell&amp;#8217;illusione appositamente fornita al popolo che esistano delle differenze tra destra, centro e sinistra mentre la realtà è che esiste una sola differenza tra coloro che possono costruire un sistema illegale a forza di leggi ingiuste e coloro che questo sistema subiscono ogni giorno sulla loro pelle.&lt;/p&gt;

&lt;p&gt;Emblematico è il fatto che a queste elezioni si sia ripresentato Berlusconi. Questa mossa serve principalmente a trasformare le votazioni da un momento di scelta politica vera ad un momento di ennesima tifoseria da stadio con l&amp;#8217;unico obiettivo finale di non cambiare nulla.&lt;/p&gt;

&lt;p&gt;Ora questo status quo di governo degli inutili, questa insopportabile zavorra economica e im-morale ci sta trascinando in un baratro economico e politico dal quale ci vorranno anni per riprendersi.&lt;/p&gt;

&lt;p&gt;Questo baratro si compone di due mostri che, come i mitologici Scilla e Cariddi, lasciano ben poca possibilità di sopravvivenza a chiunque si avventuri nella loro morsa:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;un crescente trasferimento di sovranità dai cittadini alle banche o, più in generale alla finanza&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;un livello di tassazione ed un sistema di estorsione fiscale di stampo sovietico.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Il sistema produttivo italiano è già quasi completamente spolpato dalle due insaziabili idrovore: finanza e burocrazia.&lt;/p&gt;

&lt;p&gt;La burocrazia è la fertile coltura di tutte le clientele e l&amp;#8217;ancora più stabile di ogni immobilismo.&lt;/p&gt;

&lt;p&gt;La finanza è l&amp;#8217;incarnazione più significativa di quel servire Mammona che costituisce il regno di tutto ciò che non è Dio.&lt;/p&gt;

&lt;p&gt;Di fronte a questi mali giganteschi a noi è offerta come arma un unico sasso da lanciare una volta ogni 4 anni (visto che la volontà popolare espressa nei referendum e nelle leggi a proposta popolare viene sistematicamente ignorata).&lt;/p&gt;

&lt;p&gt;Fino alle passate elezioni ho optato per la diserzione delle urne sperando che la nausea raggiungesse dei livelli tali nella popolazione da delegittimare il sistema.&lt;br /&gt;
Inoltre non c&amp;#8217;erano di fatto alternative al partito della grande abbuffata il sinistra-centro-destra che ci governa da almeno venti anni.&lt;/p&gt;

&lt;p&gt;Oggi la situazione è totalmente differente perché ci troviamo nel bel mezzo della più grave crisi economica che il mondo abbia affrontato dalla grande depressione del 1929 e attualmente stiamo affrontando questa crisi con un governo di inetti intenti unicamente a salvarsi la poltrona (per non parlare della nobile parte che su di essa si poggia!).&lt;/p&gt;

&lt;p&gt;I plausibili governi dati dal macinato alleanziale del sinistra-centro-destra ci propongono di fatto:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Il PD con Vendola che è stato già comprato da Monti versando nelle casse del Monte dei Paschi di Siena (la banca con 13 consiglieri su 16 con tessera PD) l&amp;#8217;intero gettito dell&amp;#8217;IMU. Se andrà al potere applicherà l&amp;#8217;agenda Monti&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Monti con i raccogliticci del centro, figuri diversamente ignobili che rappresentano solo se stessi (Fini, Casini, Rutelli ecc.) il cui unico programma é la sopravvivenza politica. L&amp;#8217;agenda Monti gli ha risparmiato la necessità di scrivere programmi che non hanno mai avuto la volontà di realizzare. Naturalmente applicheranno l&amp;#8217;agenda Monti&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Il Nemico di tutti i sinistri: Berlusconi. Appositamente riesumato per compattare i voti degli anti Berlusca e dei pro Berlusca che reagiranno pavlovianamente non sapendo che, mignottocrazia a parte, sempre l&amp;#8217;agenda Monti verrà applicata&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Abbiamo poi una serie di partiti dispersione: il partito di Ingroia, che ha scelto finalmente di fare politica nella sede appropriata invece che in magistratura, quello di Tremonti, che ha perso il treno della credibilità non dimettendosi da ministro quando poteva, quello di Giannino, interessantissimo se avesse anche solo la speranza di raggiungere il 5%, quello di Magdi Allam, in disperata ricerca di ricollocazione.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I partiti dispersione sono tutti ottimi ma dannosi perché disperdono la giusta esigenza di cambiamento in mille rivoli che di fatto non fanno che rendere più certa la vittoria del partito abbuffata ora sotto l&amp;#8217;ombrello Monti.&lt;/p&gt;

&lt;p&gt;Ora in questo scenario purtroppo abbastanza consueto nella penisola italica si é abbattuto un vero e proprio tsunami. Il Movimento 5 Stelle di Grillo é primo partito in Sicilia! Solo l&amp;#8217;incesto politico tra il CATTOLICISSIMO Casini (che ha un programma che pare ricopiato dal catechismo della CEI) e la sinistra ha impedito al M5S di governare in Sicilia.&lt;/p&gt;

&lt;p&gt;Bene ma non si può di certo votare il M5S solo perché é l&amp;#8217;unica alternativa al partito dell&amp;#8217;abbuffata con Monti baby sitter no?&lt;br /&gt;
Mah personalmente direi che &amp;#8216;questo mi sarebbe bastato&amp;#8217; ma il M5S ha altre pregevoli caratteristiche al proprio attivo che lo rendono il partito per cui voterò alle elezioni.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Non si pronuncia sulle questioni morali il che significa che non mette le questioni morali al centro della politica. Trovo questa cosa ottima in quanto le questioni morali debbono rimanere esterne alla politica. L&amp;#8217;ossessione della CEI per i programmi fotocopiati dal catechismo (come se poi qualcuno li applicasse!) svia i cattolici da quelli che sono i veri temi politici e che oggi sono più urgenti di qualsiasi altra cosa per la sopravvivenza della popolazione (se non ci credete informatevi su quello che sta succedendo in Grecia)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;A proposito dei veri temi della politica il M5S é l&amp;#8217;unico che parla di REFERENDUM SULL&amp;#8217;EURO e di NAZIONALIZZARE LA BANCA D&amp;#8217;ITALIA due temi centrali per la nostra sopravvivenza come popolazione e come Stato. Questo é quello che più di ogni altra cosa mi convince a votare il M5S.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Il M5S non ha preso e non prenderà il finanziamento ai partiti e si autofinanzia in maniera trasparente online.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nel M5S non ci sono personaggi già coinvolti nella distruzione del nostro Stato.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Visto che il M5S propone un massimo di due legislature sarei immensamente felice nel vedere tutti i faccioni della nostra politica guadagnarsi da vivere onestamente.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Pesco alcuni altri contenuti a caso sui quali sono completamente d&amp;#8217;accordo:&lt;br /&gt;
Not in my name sarà ceduta la più piccola goccia di sovranità nazionale&lt;br /&gt;
Not in my name verrà smantellato lo Stato Sociale&lt;br /&gt;
Not in my name i partiti che hanno distrutto l&amp;#8217;Italia si ricicleranno come salvatori della Patria&lt;br /&gt;
Not in my name i giornali che hanno fatto della menzogna un&amp;#8217;arte riceveranno un solo euro di finanziamento pubblico&lt;br /&gt;
Not in my name ci saranno ancora le pensioni d&amp;#8217;oro&lt;br /&gt;
Not in my name ci saranno i finanziamenti pubblici ai partiti&lt;br /&gt;
Not in my name rimarremo nell&amp;#8217;euro senza una consultazione popolare&lt;br /&gt;
Not in my name saranno distrutte le piccole e medie imprese&lt;br /&gt;
Not in my name i concessionari di Stato continueranno a lucrare su beni pubblici&lt;br /&gt;
Not in my name si faranno Grandi Opere inutili indebitando i cittadini&lt;br /&gt;
Not in my name chi ha fatto della politica un mestiere rimarrà al suo posto dopo aver rovinato l&amp;#8217;economia italiana&lt;br /&gt;
Not in my name la grande distribuzione ucciderà il commercio locale&lt;br /&gt;
Not in my name si costruirà un solo inceneritore&lt;br /&gt;
Not in my name i rifugiati politici saranno più trattati come bestie&lt;br /&gt;
Not in my name l&amp;#8217;Italia parteciperà alle guerre altrui come in Afghanistan o in Libia&lt;br /&gt;
Not in my name gli alti funzionari pubblici percepiranno stipendi da nababbi&lt;br /&gt;
Not in my name sarà ancora permesso il falso in bilancio&lt;br /&gt;
Not in my name l&amp;#8217;Italia non avrà una legge anticorruzione&lt;br /&gt;
Not in my name l&amp;#8217;Italia non avrà una legge contro i conflitto di interessi&lt;br /&gt;
Not in my name sarà più eletto alla presidenza del Consiglio chi non ha avuto una legittimità popolare&lt;br /&gt;
Not in my name la legge elettorale potrà essere cambiata dai partiti che ne sono i beneficiari, ma solo attraverso un referendum&lt;br /&gt;
Not in my name esisterà ancora Equitalia&lt;br /&gt;
Not in my name la RAI sarà più gestita dai partiti&lt;br /&gt;
Not in my name l&amp;#8217;Italia sarà spolpata per comprare il nostro debito pubblico dalle banche francesi e tedesche&lt;br /&gt;
Not in my name la finanza sostituirà la politica&lt;br /&gt;
Not in my name la prima casa potrà essere ipotecata per tasse non pagate o soggetta all&amp;#8217;IMU&lt;br /&gt;
Not in my name continuerà la cementificazione dell&amp;#8217;Italia&lt;br /&gt;
Not in my name qualcuno potrà essere lasciato indietro&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Se venisse realizzato anche solo il 30% di tutto ciò sarei il cittadino più felice del mondo.&lt;/p&gt;

&lt;p&gt;Forse però le persone che vengono candidate non saranno in grado di realizzare nulla perché non sono mica brave a rubare come i politici di professione&amp;#8230;&lt;br /&gt;
Forse però alla fine il M5S farà come già fanno tutti gli altri per cui potrei votare e una volta arrivato si rimangerà tutto&amp;#8230;&lt;br /&gt;
Forse però Grillo é massone, populista demagogo e antipolitica&amp;#8230;&lt;/p&gt;

&lt;p&gt;Non lo so, sinceramente non lo so.&lt;/p&gt;

&lt;p&gt;Quello che so per certo é che tutti gli altri hanno già rubato oltre ogni decenza.&lt;br /&gt;
So per certo che chiunque sventola i principi non negoziabili per distrarre dalle proprie immoralità e ruberie li rende per ciò stesso negoziabili perché come può difendere la verità chi é disposto a vendersi per denaro?&lt;br /&gt;
So per certo che nulla che viene da dentro questo sistema potrà mai cambiare il sistema.&lt;br /&gt;
So per certo che, se non cambiamo ora, ci attendono anni disperati nei quali l&amp;#8217;unico programma di tata Monti sarà quello di continuare a trasferire i nostri soldi alle banche, ai fondi di investimento, fino a quando il nostro livello di vita sarà ridotto ad uno stadio tale da essere di fatto non più cittadini e nemmeno sudditi ma schiavi (a questo proposito vi invito a riflettere sui recenti super poteri inquisitori attribuiti al fisco tramite la possibilità di accesso a tutti i nostri conti correnti abbinata alla necessità di fatto di aprirne uno e tramite il redditometro).&lt;br /&gt;
So per certo che continueranno ad agitare l&amp;#8217;evasione degli idraulici e dei liberi professionisti per metterci gli uni contro gli altri e continuare a nascondere le evasioni miliardarie realizzate tramite le loro banche.&lt;/p&gt;

&lt;p&gt;Sicuramente non siamo di fronte a la Soluzione e molte parti del programma non mi entusiasmano ma tutto considerato voglio darmi l&amp;#8217;opportunità di sbagliare.&lt;/p&gt;

&lt;p&gt;Se anche voi volete darvi questa opportunità &lt;a href=&#34;http://www.beppegrillo.it/iniziative/movimentocinquestelle/Programma-Movimento-5-Stelle.pdf&#34;&gt;leggete il programma&lt;/a&gt;, &lt;a href=&#34;https://www.beppegrillo.it/votazioni/candidati/elenco_circoscrizioni.php&#34;&gt;guardate i candidati&lt;/a&gt; e proviamo a uscire insieme dalla logica del Gattopardo!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The extreme need of money Refactoring</title>
      <link>http://thinkingco.de/blog/the-extreme-need-of-money-refactoring/</link>
      <pubDate>Wed, 03 Oct 2012 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/blog/the-extreme-need-of-money-refactoring/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Time is Money&lt;/strong&gt; is a sentence which has become a symbol of our capitalistic society.&lt;/p&gt;

&lt;p&gt;This highly condensed capitalistic bible brings in its meaning that whoever owns money owns time, owns our time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll let it sink down slowly: if time is money whoever owns money owns our time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is extremely true from small things to big ones.&lt;/p&gt;

&lt;p&gt;If you own money you can spend it instead of time or you can buy other&amp;rsquo;s time to do what you want (two faces of the same coin).&lt;/p&gt;

&lt;p&gt;Now think about taxation. In every modern state a portion of what you earn (in Italy about a half of it!) must be given back to the State.&lt;/p&gt;

&lt;p&gt;This actually means that a portion of your job time is being worked for someone which is neither you nor your customer but the State. So a portion of your time is forcefully owned by the State through taxation, that is to say through money.&lt;/p&gt;

&lt;p&gt;This is more than true for big financial players who literally own entire communities through their &amp;#8220;public debt&amp;#8221;. A clear example of this ownership is what has recently happened to Italy (just to name one of the european states that are actually bankers&amp;rsquo; driven).&lt;/p&gt;

&lt;p&gt;Italy had a government democratically chosen (at least to the extent to which Italy is still a democracy), bad or good it was our choice (actually not mine because I choose not to vote).&lt;/p&gt;

&lt;p&gt;It was not the right government according to Big Finance and was to be replaced.&lt;/p&gt;

&lt;p&gt;On order was sent to sell italian debt from major banks to all their big customers, spread went madly up and main stream information told that Italy had lost the trust from markets.&lt;/p&gt;

&lt;p&gt;The government went under (further) pressure and selected Mario Monti (trilateral, bildenberg and Goldman Sachs man) to build a technical government. In his government stands the banker Corrado Passera.&lt;/p&gt;

&lt;p&gt;This is just and example of how money and money makers own communities and can bring to power people they like and people who will serve their interest and not those of the communities.&lt;/p&gt;

&lt;p&gt;Mario Monti (as Mario Draghi in the BCE and Papadopulous in Greece) are there for one and only reason: to force communities to pay their states&amp;rsquo; public debt to banks.&lt;/p&gt;

&lt;p&gt;So now the circle comes to its end:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;our states create public debt &amp;#8220;for our needs&amp;#8221; borrowing money from private banks in exchange for a compound interest rate&lt;/li&gt;
&lt;li&gt;during time the compound interest becomes the biggest part of states&amp;rsquo; debt so&lt;/li&gt;
&lt;li&gt;states put higher taxes on the people owning more and more of their time&lt;/li&gt;
&lt;li&gt;states &amp;#8230;. create public debt to pay interests on their debt!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the usurers loop in which we are actually in.&lt;/p&gt;

&lt;p&gt;Our freedom and our time is almost completely in the hand of money makers: private banks.&lt;/p&gt;

&lt;p&gt;This is not good life code! Life is designed to be free and real, financial debt is enslaving and fake.&lt;/p&gt;

&lt;p&gt;This was well known both in the Jewish and Christian worlds in both of which it was solved by &lt;strong&gt;debt cancellation&lt;/strong&gt;: each seven or twenty five years.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It was still well known that after some time debts will destroy real life and economy, the solution was simple and effective: &lt;strong&gt;systematically destroy debts&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our terminal capitalistic society the solution is simply to destroy life and real economy (see what&amp;rsquo;s happening to Greece).&lt;/p&gt;

&lt;p&gt;How can we refactor this code so that it can be useful to life instead of destroying it?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who&#39;s calling? (I mean ruby method)</title>
      <link>http://thinkingco.de/techblog/whos-calling-i-mean-ruby-method/</link>
      <pubDate>Wed, 03 Oct 2012 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/whos-calling-i-mean-ruby-method/</guid>
      <description>&lt;p&gt;I needed to know which method was calling another method in a ruby app.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m writing a legacy protocol parser and need to control that received packets from the serial port stream are matching with commands replies.&lt;/p&gt;

&lt;p&gt;So I have a set of methods performing some commands and constants which represent correct replies:&lt;/p&gt;

&lt;p&gt;I wanted to be able to have the following interface to parse reply packets so that I can adapt the correct answer on the basis of the sent command:&lt;/p&gt;

&lt;p&gt;So I had to find a way to dynamically call the reply packet constant.&lt;/p&gt;

&lt;p&gt;I already named the constants with the same name as the called command prepended by an &lt;strong&gt;R_&lt;/strong&gt; standing for reply.&lt;/p&gt;

&lt;p&gt;The main problem was how to find the &lt;strong&gt;calling_method&lt;/strong&gt;.&lt;br /&gt;
I found out that in the ruby Kernel there is a method called &lt;strong&gt;caller&lt;/strong&gt; which prints the calling chain in a ruby script.&lt;br /&gt;
The only task was then to parse the last method name from the chain:&lt;/p&gt;

&lt;p&gt;The parse_answer method ended up being coded like this:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>