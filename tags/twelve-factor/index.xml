<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Twelve-Factor on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://thinkingco.de/tags/twelve-factor/index.xml/</link>
    
    
    
    <updated>Wed, 11 Dec 2013 02:33:24 &#43;0000</updated>
    
    <item>
      <title>Deployment Rails with Docker Part 1</title>
      <link>http://thinkingco.de/techblog/deploy-rails-with-docker-part-1/</link>
      <pubDate>Wed, 11 Dec 2013 02:33:24 &#43;0000</pubDate>
      
      <guid>http://thinkingco.de/techblog/deploy-rails-with-docker-part-1/</guid>
      <description>

&lt;p&gt;After my &lt;a href=&#34;http://thinkingco.de/easy-peasy-deploy&#34;&gt;first approach&lt;/a&gt; to easying up the many pains of Rails deployment I happened to bump into &lt;a href=&#34;http://www.docker.io&#34;&gt;Docker&lt;/a&gt; for a broader PAAS project.&lt;/p&gt;

&lt;p&gt;So my thought was: why automate only code deployment if I can automate the whole machine deployment especially with a tool like Docker that makes this task trivial and quick.&lt;/p&gt;

&lt;p&gt;In this way it will be extremely easy to replicate a development/production environment and instead of updating code I could simply redeploy a machine.&lt;br /&gt;
Not only this but it will be easier to experiment with a broader PAAS deployment.&lt;/p&gt;

&lt;p&gt;So these will be the takeaways from this series of posts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Configure a Rails app to be deployed on a cloud architecture (Part 1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a vagrant test machine with docker installed (Part 1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Interactive image building vs. Dockerfiles (Part 2)&lt;/li&gt;
&lt;li&gt;Data Persistence (Part 2)&lt;/li&gt;
&lt;li&gt;Development vs. Production (Part 2)&lt;/li&gt;
&lt;li&gt;Create 7 docker containers that will host the reconfigured rails app (Part 3):

&lt;ul&gt;
&lt;li&gt;Container 1: Redis Server (for session storing)&lt;/li&gt;
&lt;li&gt;Container 2: Fluentd (log collection)&lt;/li&gt;
&lt;li&gt;Container 3: ElasticSearch (log storage)&lt;/li&gt;
&lt;li&gt;Container 4: Kibana (log analysis)&lt;/li&gt;
&lt;li&gt;Container 5: PostgreSQL + PostGIS&lt;/li&gt;
&lt;li&gt;Container 6: Ruby 2.1.1 Rails Puma&lt;/li&gt;
&lt;li&gt;Container 7: Nginx&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Link the 7 containers through &lt;a href=&#34;http://blog.docker.io/tag/links/&#34;&gt;Docker Links&lt;/a&gt; (Part 3) —&amp;gt; intra host communication&lt;/li&gt;
&lt;li&gt;Create another vagrant test machine with docker (Part 4)&lt;/li&gt;
&lt;li&gt;Deploy PostgreSQL on this second host (Part 4)&lt;/li&gt;
&lt;li&gt;Make the app work with the second host postgres container (Part 4) —&amp;gt; inter host communication&lt;/li&gt;
&lt;li&gt;SCALE (Part 5)

&lt;ul&gt;
&lt;li&gt;Automatic Service Discovery with &lt;a href=&#34;https://github.com/skynetservices/skydns&#34;&gt;Skydns&lt;/a&gt; and &lt;a href=&#34;https://github.com/crosbymichael/skydock&#34;&gt;Skydock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Session data and Logs HA&lt;/li&gt;
&lt;li&gt;Database HA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The overview seems quite interesting so let’s start.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Configure a Rails app to be deployed on a cloud architecture&lt;/h2&gt;

&lt;p&gt;To configure the Rails app (or every other app) to be cloud deployable you need to follow the &lt;a href=&#34;12factor.net&#34;&gt;The twelve-factor app methodology&lt;/a&gt;.&lt;br /&gt;
You can use this methodology to build software-as-a-service apps that:&lt;br /&gt;
&amp;#8211; Use declarative formats for setup automation, to minimize time and cost for new developers joining the project;&lt;br /&gt;
&amp;#8211; Have a clean contract with the underlying operating system, offering maximum portability between execution environments;&lt;br /&gt;
&amp;#8211; Are suitable for deployment on modern cloud platforms, obviating the need for servers and systems administration;&lt;br /&gt;
&amp;#8211; Minimize divergence between development and production, enabling continuous deployment for maximum agility;&lt;br /&gt;
&amp;#8211; And can scale up without significant changes to tooling, architecture, or development practices.&lt;/p&gt;

&lt;p&gt;Going through the twelve factors I found that most of the steps are already achieved through git versioning + rails YAY!!!&lt;/p&gt;

&lt;p&gt;Nonetheless there are some points to tackle.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Config&lt;/h3&gt;

&lt;p&gt;Rails stores configuration in config files which are not checked into revision control. This violates the principle of &lt;strong&gt;strict separation of config from code&lt;/strong&gt;.&lt;br /&gt;
Configuration must not be grouped (development, test, production) and must be independently managed for each deploy.&lt;br /&gt;
It must be stored in &lt;strong&gt;&lt;em&gt;environment variables&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So what we need is a place to store env variables which won’t be committed into our git repository and a way to load it into Rails.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv gem&lt;/a&gt; is a wellcomed help in this task expecially in its master branch which now initializes before database (&lt;a href=&#34;https://github.com/laserlemon/figaro/issues/70&#34;&gt;see here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The dotenv gem let you use a &lt;code&gt;.env&lt;/code&gt;file to store ENV variables (you can also use a different &lt;code&gt;.env.environment&lt;/code&gt; file for each environment though this will break the twelve factor app principles)&lt;/p&gt;

&lt;p&gt;Something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;S3_BUCKET=YOURS3BUCKET
SECRET_KEY=YOURSECRETKEYGOESHERE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That you can use in your code this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.fog_directory  = ENV[&#39;S3_BUCKET&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time the rails app loads it will have all the variables declared in &lt;code&gt;.env&lt;/code&gt; available in &lt;code&gt;ENV&lt;/code&gt;!&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Processes&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Twelve-factor processes are stateless and share-nothing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amongst other things this means we need to store our session data either in the DB or in another kind of datastore.&lt;br /&gt;
Using the db will introduce significant lag in page rendering so I want to use a faster key/value datastore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://memcached.org/&#34;&gt;Memcached&lt;/a&gt; is a very interesting and clusterable datastore but I will use &lt;strong&gt;&lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;&lt;/strong&gt; for two fundamental reasons:&lt;br /&gt;
1. first and foremost because its creator is italian!&lt;br /&gt;
2. faster than memcached&lt;br /&gt;
3. more powerful commands&lt;br /&gt;
4. no cache warmup needed&lt;br /&gt;
5. useful for solving other problems (eg. queues with Resque)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/roidrage/redis-session-store&#34;&gt;redis-session-store&lt;/a&gt; to the rescue!&lt;/p&gt;

&lt;p&gt;Once installed and run a Redis server switching Rails session management to Redis is as simple as&lt;br /&gt;
adding a dependency on the redis-session-store gem to your Gemfile then run bundle.&lt;/p&gt;

&lt;p&gt;Open the session initializer &lt;code&gt;config/initializers/session_store.rb&lt;/code&gt; and add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AppName::Application.config.session_store :redis_session_store, {
  key: &#39;redis_session&#39;,
  redis: {
    db: 2,
    expire_after: 120.minutes,
    key_prefix: &#39;appname:session:&#39;,
    host: ENV[&amp;quot;REDIS_PORT_6379_TCP_ADDR&amp;quot;], # Redis host name, default is localhost
    port: ENV[&amp;quot;REDIS_PORT_6379_TCP_PORT&amp;quot;]   # Redis port, default is 6379
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart the server and you&amp;#8217;re ready to go!&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Keep development, staging, and production as similar as possible&lt;/h3&gt;

&lt;p&gt;Using Docker on Vagrant on my development machine means that my development and production environments will be identical!&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Treat logs as event streams&lt;/h3&gt;

&lt;p&gt;While rails is already configured to log &lt;code&gt;stdout&lt;/code&gt; to terminal when in development mode it is not thought to route events to a standard destination for long term archiving.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://fluentd.org/&#34;&gt;Fluentd&lt;/a&gt; is an open source log router (written in ruby) which can used to route log streams to a permanent storing location (MongoDB or a PostgreSQL hstore to avoid inserting another piece of software in the overall architecture, or ElasticSearch to analyze log data) and which includes a robust buffering solution.&lt;/p&gt;

&lt;p&gt;Using fluentd in a Rails 4 can be achieved through the following steps:&lt;br /&gt;
1. &lt;a href=&#34;http://docs.fluentd.org/articles/before-install&#34;&gt;Prepare the OS&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&#34;http://docs.fluentd.org/articles/install-by-deb&#34;&gt;Install fluentd (Debian flavor)&lt;/a&gt;&lt;br /&gt;
3. Add fluent logger gem to rails app&lt;br /&gt;
gem &amp;#8216;act-fluent-logger-rails&amp;#8217;&lt;br /&gt;
bundle&lt;br /&gt;
4. Configure rails to log through fluentd&lt;br /&gt;
&amp;#8211; in config/environments/production.rb&lt;br /&gt;
config.log_level = :info&lt;br /&gt;
config.logger = ActFluentLoggerRails::Logger.&lt;br /&gt;
new()&lt;br /&gt;
&amp;#8211; create a config/fluent-logger.yml file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;production:
  fluent_host:   ‘192.168.x.x’
  fluent_port:   24224
  tag:           &#39;foo&#39;
  messages_type: &#39;string&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Create a vagrant test machine with docker installed&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.docker.io/en/latest/installation/vagrant/&#34;&gt;Docker guide&lt;/a&gt; works flawlessy and deploys a vagrant image through a Dockerfile deploying docker through docker &amp;#8230; awesome!&lt;/p&gt;

&lt;p&gt;The Docker version actually deployed is 0.6.1 I need to upgrade to use the &lt;strong&gt;links&lt;/strong&gt; functionality available from 0.6.5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install curl
# Add the Docker repository key to your local keychain
sudo sh -c &amp;quot;curl https://get.docker.io/gpg | apt-key add -&amp;quot;
# Add the Docker repository to your apt sources list.
sudo sh -c &amp;quot;echo deb https://get.docker.io/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
# update your sources list
sudo apt-get update
# install the latest
sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DONE!&lt;/p&gt;

&lt;p&gt;That was easy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This ends Part 1.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>